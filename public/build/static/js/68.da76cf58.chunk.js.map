{"version":3,"sources":["../node_modules/codemirror/mode/mbox/mbox.js"],"names":["CodeMirror","rfc2822","rfc2822NoEmail","registerHelper","concat","whitespace","separator","rfc2822Header","RegExp","join","rfc2822HeaderNoEmail","header","email","untilEmail","bracketedEmail","untilBracketedEmail","readToken","stream","state","sol","inSeparator","inHeader","match","inHeaders","emailPermitted","skipToEnd","style","styleForHeader","defineMode","startState","token","blankLine","defineMIME","mod","require"],"mappings":"wFAUG,SAASA,GACZ,aAEA,IAAIC,EAAU,CACZ,OAAQ,SAAU,WAAY,KAAM,KAAM,MAAO,aACjD,cAAe,aAAc,cAAe,gBAAiB,YAC7D,YAAa,aAAc,oBAAqB,cAAe,YAE7DC,EAAiB,CACnB,OAAQ,UAAW,WAAY,WAAY,eAG7CF,EAAWG,eAAe,YAAa,OAAQF,EAAQG,OAAOF,IAE9D,IAAIG,EAAa,SACbC,EAAY,SACZC,EAAgB,IAAIC,OAAO,KAAOP,EAAQQ,KAAK,KAAO,OACtDC,EAAuB,IAAIF,OAAO,KAAON,EAAeO,KAAK,KAAO,OACpEE,EAAS,UACTC,EAAQ,eACRC,EAAa,uBACbC,EAAiB,SACjBC,EAAsB,eAO1B,SAASC,EAAUC,EAAQC,GACzB,GAAID,EAAOE,MAAO,CAGhB,GADAD,EAAME,aAAc,EAChBF,EAAMG,UAAYJ,EAAOK,MAAMjB,GAEjC,OAAO,KAMT,GAJEa,EAAMG,UAAW,EACjBH,EAAMP,OAAS,KAGbM,EAAOK,MAAMhB,GAGf,OAFAY,EAAMK,WAAY,EAClBL,EAAME,aAAc,EACb,OAGT,IAAIE,EACAE,GAAiB,EACrB,OAAKF,EAAQL,EAAOK,MAAMZ,MACrBc,GAAiB,KAAUF,EAAQL,EAAOK,MAAMf,KACnDW,EAAMK,WAAY,EAClBL,EAAMG,UAAW,EACjBH,EAAMM,eAAiBA,EACvBN,EAAMP,OAASW,EAAM,GACd,QAKLJ,EAAMK,YAAcD,EAAQL,EAAOK,MAAMX,KAC3CO,EAAMG,UAAW,EACjBH,EAAMM,gBAAiB,EACvBN,EAAMP,OAASW,EAAM,GACd,SAGTJ,EAAMK,WAAY,EAClBN,EAAOQ,YACA,MAGT,GAAIP,EAAME,YACR,OAAIH,EAAOK,MAAMV,GAAe,QAC5BK,EAAOK,MAAMT,IACjBI,EAAOQ,YAD8B,QAKvC,GAAIP,EAAMG,SAAU,CAClB,IAAIK,EAxDR,SAAwBf,GACtB,MAAe,YAAXA,EAA6B,SAC1B,SAsDOgB,CAAeT,EAAMP,QAEjC,GAAIO,EAAMM,eAAgB,CACxB,GAAIP,EAAOK,MAAMR,GAAiB,OAAOY,EAAQ,QACjD,GAAIT,EAAOK,MAAMP,GAAsB,OAAOW,EAGhD,OADAT,EAAOQ,YACAC,EAIT,OADAT,EAAOQ,YACA,KAGTzB,EAAW4B,WAAW,QAAQ,WAC5B,MAAO,CACLC,WAAY,WACV,MAAO,CAELT,aAAa,EAEbC,UAAU,EAEVG,gBAAgB,EAEhBb,OAAQ,KAERY,WAAW,IAGfO,MAAOd,EACPe,UAAW,SAASb,GAClBA,EAAMK,UAAYL,EAAME,YAAcF,EAAMG,UAAW,OAK7DrB,EAAWgC,WAAW,mBAAoB,QA1HtCC,CAAIC,EAAQ","file":"static/js/68.da76cf58.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nvar rfc2822 = [\n  \"From\", \"Sender\", \"Reply-To\", \"To\", \"Cc\", \"Bcc\", \"Message-ID\",\n  \"In-Reply-To\", \"References\", \"Resent-From\", \"Resent-Sender\", \"Resent-To\",\n  \"Resent-Cc\", \"Resent-Bcc\", \"Resent-Message-ID\", \"Return-Path\", \"Received\"\n];\nvar rfc2822NoEmail = [\n  \"Date\", \"Subject\", \"Comments\", \"Keywords\", \"Resent-Date\"\n];\n\nCodeMirror.registerHelper(\"hintWords\", \"mbox\", rfc2822.concat(rfc2822NoEmail));\n\nvar whitespace = /^[ \\t]/;\nvar separator = /^From /; // See RFC 4155\nvar rfc2822Header = new RegExp(\"^(\" + rfc2822.join(\"|\") + \"): \");\nvar rfc2822HeaderNoEmail = new RegExp(\"^(\" + rfc2822NoEmail.join(\"|\") + \"): \");\nvar header = /^[^:]+:/; // Optional fields defined in RFC 2822\nvar email = /^[^ ]+@[^ ]+/;\nvar untilEmail = /^.*?(?=[^ ]+?@[^ ]+)/;\nvar bracketedEmail = /^<.*?>/;\nvar untilBracketedEmail = /^.*?(?=<.*>)/;\n\nfunction styleForHeader(header) {\n  if (header === \"Subject\") return \"header\";\n  return \"string\";\n}\n\nfunction readToken(stream, state) {\n  if (stream.sol()) {\n    // From last line\n    state.inSeparator = false;\n    if (state.inHeader && stream.match(whitespace)) {\n      // Header folding\n      return null;\n    } else {\n      state.inHeader = false;\n      state.header = null;\n    }\n\n    if (stream.match(separator)) {\n      state.inHeaders = true;\n      state.inSeparator = true;\n      return \"atom\";\n    }\n\n    var match;\n    var emailPermitted = false;\n    if ((match = stream.match(rfc2822HeaderNoEmail)) ||\n        (emailPermitted = true) && (match = stream.match(rfc2822Header))) {\n      state.inHeaders = true;\n      state.inHeader = true;\n      state.emailPermitted = emailPermitted;\n      state.header = match[1];\n      return \"atom\";\n    }\n\n    // Use vim's heuristics: recognize custom headers only if the line is in a\n    // block of legitimate headers.\n    if (state.inHeaders && (match = stream.match(header))) {\n      state.inHeader = true;\n      state.emailPermitted = true;\n      state.header = match[1];\n      return \"atom\";\n    }\n\n    state.inHeaders = false;\n    stream.skipToEnd();\n    return null;\n  }\n\n  if (state.inSeparator) {\n    if (stream.match(email)) return \"link\";\n    if (stream.match(untilEmail)) return \"atom\";\n    stream.skipToEnd();\n    return \"atom\";\n  }\n\n  if (state.inHeader) {\n    var style = styleForHeader(state.header);\n\n    if (state.emailPermitted) {\n      if (stream.match(bracketedEmail)) return style + \" link\";\n      if (stream.match(untilBracketedEmail)) return style;\n    }\n    stream.skipToEnd();\n    return style;\n  }\n\n  stream.skipToEnd();\n  return null;\n};\n\nCodeMirror.defineMode(\"mbox\", function() {\n  return {\n    startState: function() {\n      return {\n        // Is in a mbox separator\n        inSeparator: false,\n        // Is in a mail header\n        inHeader: false,\n        // If bracketed email is permitted. Only applicable when inHeader\n        emailPermitted: false,\n        // Name of current header\n        header: null,\n        // Is in a region of mail headers\n        inHeaders: false\n      };\n    },\n    token: readToken,\n    blankLine: function(state) {\n      state.inHeaders = state.inSeparator = state.inHeader = false;\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"application/mbox\", \"mbox\");\n});\n"],"sourceRoot":""}