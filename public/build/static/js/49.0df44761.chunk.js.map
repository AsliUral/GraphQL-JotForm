{"version":3,"sources":["../node_modules/codemirror/mode/eiffel/eiffel.js"],"names":["CodeMirror","defineMode","wordObj","words","o","i","e","length","keywords","operators","tokenBase","stream","state","eatSpace","quote","style","unescaped","ch","next","newtok","tokenize","push","chain","escaped","pop","eat","skipToEnd","test","eatWhile","startState","token","word","current","propertyIsEnumerable","lineComment","defineMIME","mod","require"],"mappings":"wFAUG,SAASA,GACZ,aAEAA,EAAWC,WAAW,UAAU,WAC9B,SAASC,EAAQC,GAEf,IADA,IAAIC,EAAI,GACCC,EAAI,EAAGC,EAAIH,EAAMI,OAAQF,EAAIC,IAAKD,EAAGD,EAAED,EAAME,KAAM,EAC5D,OAAOD,EAET,IAAII,EAAWN,EAAQ,CACrB,OACA,SACA,OACA,UACA,QACA,SACA,WACA,OACA,QACA,SACA,QACA,SACA,UACA,SACA,YACA,WACA,SACA,OACA,MACA,WACA,OACA,QACA,OACA,KACA,UACA,QACA,UACA,KACA,SACA,OACA,WACA,SACA,SACA,MACA,SACA,OACA,KACA,WACA,SACA,QACA,QACA,QACA,WACA,YACA,UACA,WACA,UACA,WACA,WACA,QACA,OACA,OACA,SACA,YACA,QACA,UACA,SACA,WACA,aACA,KACA,MACA,UACA,MACA,OAEEO,EAAYP,EAAQ,CAAC,KAAM,WAAW,MAAO,KAAK,KAAK,OAO3D,SAASQ,EAAUC,EAAQC,GACzB,GAAID,EAAOE,WAAY,OAAO,KAC9B,IAwBkBC,EAAOC,EAAQC,EAxB7BC,EAAKN,EAAOO,OAChB,MAAU,KAAND,GAAiB,KAANA,EARjB,SAAeE,EAAQR,EAAQC,GAE7B,OADAA,EAAMQ,SAASC,KAAKF,GACbA,EAAOR,EAAQC,GAObU,EAsBSR,EAtBQG,EAsBDF,EAtBK,SAuBvB,SAASJ,EAAQC,GAEtB,IADA,IAAqBK,EAAjBM,GAAU,EACiB,OAAvBN,EAAKN,EAAOO,SAAiB,CACnC,GAAID,GAAMH,IAAUE,IAAcO,GAAU,CAC1CX,EAAMQ,SAASI,MACf,MAEFD,GAAWA,GAAiB,KAANN,EAExB,OAAOF,IAhCgCJ,EAAQC,GAChC,KAANK,GAAWN,EAAOc,IAAI,MAC/Bd,EAAOe,YACA,WACQ,KAANT,GAAWN,EAAOc,IAAI,KACxB,WACE,QAAQE,KAAKV,IACtBN,EAAOiB,SAAS,iBAChBjB,EAAOc,IAAI,UACJ,SACE,eAAeE,KAAKV,IAC7BN,EAAOiB,SAAS,gBAChBjB,EAAOc,IAAI,UACJ,SACE,iBAAiBE,KAAKV,IAC/BN,EAAOiB,SAAS,kBACT,YAEA,KAkBX,MAAO,CACLC,WAAY,WACV,MAAO,CAACT,SAAU,CAACV,KAGrBoB,MAAO,SAASnB,EAAQC,GACtB,IAAIG,EAAQH,EAAMQ,SAASR,EAAMQ,SAASb,OAAO,GAAGI,EAAQC,GAC5D,GAAa,SAATG,EAAkB,CACpB,IAAIgB,EAAOpB,EAAOqB,UAClBjB,EAAQP,EAASyB,qBAAqBtB,EAAOqB,WAAa,UACtDvB,EAAUwB,qBAAqBtB,EAAOqB,WAAa,WACnD,qBAAqBL,KAAKI,GAAQ,MAClC,iBAAiBJ,KAAKI,IACtB,iBAAiBJ,KAAKI,IACtB,uBAAuBJ,KAAKI,IAC5B,uCAAuCJ,KAAKI,IAC5C,YAAYJ,KAAKI,GAJa,SAK9B,WAEN,OAAOhB,GAETmB,YAAa,SAIjBlC,EAAWmC,WAAW,gBAAiB,UAxJnCC,CAAIC,EAAQ","file":"static/js/49.0df44761.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"eiffel\", function() {\n  function wordObj(words) {\n    var o = {};\n    for (var i = 0, e = words.length; i < e; ++i) o[words[i]] = true;\n    return o;\n  }\n  var keywords = wordObj([\n    'note',\n    'across',\n    'when',\n    'variant',\n    'until',\n    'unique',\n    'undefine',\n    'then',\n    'strip',\n    'select',\n    'retry',\n    'rescue',\n    'require',\n    'rename',\n    'reference',\n    'redefine',\n    'prefix',\n    'once',\n    'old',\n    'obsolete',\n    'loop',\n    'local',\n    'like',\n    'is',\n    'inspect',\n    'infix',\n    'include',\n    'if',\n    'frozen',\n    'from',\n    'external',\n    'export',\n    'ensure',\n    'end',\n    'elseif',\n    'else',\n    'do',\n    'creation',\n    'create',\n    'check',\n    'alias',\n    'agent',\n    'separate',\n    'invariant',\n    'inherit',\n    'indexing',\n    'feature',\n    'expanded',\n    'deferred',\n    'class',\n    'Void',\n    'True',\n    'Result',\n    'Precursor',\n    'False',\n    'Current',\n    'create',\n    'attached',\n    'detachable',\n    'as',\n    'and',\n    'implies',\n    'not',\n    'or'\n  ]);\n  var operators = wordObj([\":=\", \"and then\",\"and\", \"or\",\"<<\",\">>\"]);\n\n  function chain(newtok, stream, state) {\n    state.tokenize.push(newtok);\n    return newtok(stream, state);\n  }\n\n  function tokenBase(stream, state) {\n    if (stream.eatSpace()) return null;\n    var ch = stream.next();\n    if (ch == '\"'||ch == \"'\") {\n      return chain(readQuoted(ch, \"string\"), stream, state);\n    } else if (ch == \"-\"&&stream.eat(\"-\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    } else if (ch == \":\"&&stream.eat(\"=\")) {\n      return \"operator\";\n    } else if (/[0-9]/.test(ch)) {\n      stream.eatWhile(/[xXbBCc0-9\\.]/);\n      stream.eat(/[\\?\\!]/);\n      return \"ident\";\n    } else if (/[a-zA-Z_0-9]/.test(ch)) {\n      stream.eatWhile(/[a-zA-Z_0-9]/);\n      stream.eat(/[\\?\\!]/);\n      return \"ident\";\n    } else if (/[=+\\-\\/*^%<>~]/.test(ch)) {\n      stream.eatWhile(/[=+\\-\\/*^%<>~]/);\n      return \"operator\";\n    } else {\n      return null;\n    }\n  }\n\n  function readQuoted(quote, style,  unescaped) {\n    return function(stream, state) {\n      var escaped = false, ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && (unescaped || !escaped)) {\n          state.tokenize.pop();\n          break;\n        }\n        escaped = !escaped && ch == \"%\";\n      }\n      return style;\n    };\n  }\n\n  return {\n    startState: function() {\n      return {tokenize: [tokenBase]};\n    },\n\n    token: function(stream, state) {\n      var style = state.tokenize[state.tokenize.length-1](stream, state);\n      if (style == \"ident\") {\n        var word = stream.current();\n        style = keywords.propertyIsEnumerable(stream.current()) ? \"keyword\"\n          : operators.propertyIsEnumerable(stream.current()) ? \"operator\"\n          : /^[A-Z][A-Z_0-9]*$/g.test(word) ? \"tag\"\n          : /^0[bB][0-1]+$/g.test(word) ? \"number\"\n          : /^0[cC][0-7]+$/g.test(word) ? \"number\"\n          : /^0[xX][a-fA-F0-9]+$/g.test(word) ? \"number\"\n          : /^([0-9]+\\.[0-9]*)|([0-9]*\\.[0-9]+)$/g.test(word) ? \"number\"\n          : /^[0-9]+$/g.test(word) ? \"number\"\n          : \"variable\";\n      }\n      return style;\n    },\n    lineComment: \"--\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-eiffel\", \"eiffel\");\n\n});\n"],"sourceRoot":""}