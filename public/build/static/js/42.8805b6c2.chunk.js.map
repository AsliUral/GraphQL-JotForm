{"version":3,"sources":["../node_modules/codemirror/mode/d/d.js"],"names":["CodeMirror","words","str","obj","split","i","length","defineMode","config","parserConfig","curPunc","indentUnit","statementIndentUnit","keywords","builtin","blockKeywords","atoms","hooks","multiLineStrings","isOperatorChar","tokenBase","stream","state","quote","ch","next","result","tokenize","escaped","end","test","eatWhile","eat","tokenNestedComment","tokenComment","skipToEnd","cur","current","propertyIsEnumerable","maybeEnd","Context","indented","column","type","align","prev","this","pushContext","col","indent","context","popContext","t","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","textAfter","Pass","firstChar","charAt","closing","electricChars","blockCommentStart","blockCommentEnd","blockCommentContinue","lineComment","fold","defineMIME","name","_state","mod","require"],"mappings":"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","file":"static/js/42.8805b6c2.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"d\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit,\n      statementIndentUnit = parserConfig.statementIndentUnit || indentUnit,\n      keywords = parserConfig.keywords || {},\n      builtin = parserConfig.builtin || {},\n      blockKeywords = parserConfig.blockKeywords || {},\n      atoms = parserConfig.atoms || {},\n      hooks = parserConfig.hooks || {},\n      multiLineStrings = parserConfig.multiLineStrings;\n  var isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n\n  var curPunc;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (hooks[ch]) {\n      var result = hooks[ch](stream, state);\n      if (result !== false) return result;\n    }\n    if (ch == '\"' || ch == \"'\" || ch == \"`\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"+\")) {\n        state.tokenize = tokenNestedComment;\n        return tokenNestedComment(stream, state);\n      }\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur)) {\n      if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n      return \"keyword\";\n    }\n    if (builtin.propertyIsEnumerable(cur)) {\n      if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n      return \"builtin\";\n    }\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = null;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function tokenNestedComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = null;\n        break;\n      }\n      maybeEnd = (ch == \"+\");\n    }\n    return \"comment\";\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type) {\n    var indent = state.indented;\n    if (state.context && state.context.type == \"statement\")\n      indent = state.context.indented;\n    return state.context = new Context(indent, col, type, null, state.context);\n  }\n  function popContext(state) {\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\")\n      state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      return {\n        tokenize: null,\n        context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\") && ctx.type == \"statement\") popContext(state);\n      else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n      else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n      else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n      else if (curPunc == \"}\") {\n        while (ctx.type == \"statement\") ctx = popContext(state);\n        if (ctx.type == \"}\") ctx = popContext(state);\n        while (ctx.type == \"statement\") ctx = popContext(state);\n      }\n      else if (curPunc == ctx.type) popContext(state);\n      else if (((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';') || (ctx.type == \"statement\" && curPunc == \"newstatement\"))\n        pushContext(state, stream.column(), \"statement\");\n      state.startOfLine = false;\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase && state.tokenize != null) return CodeMirror.Pass;\n      var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n      if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n      var closing = firstChar == ctx.type;\n      if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit);\n      else if (ctx.align) return ctx.column + (closing ? 0 : 1);\n      else return ctx.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricChars: \"{}\",\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    blockCommentContinue: \" * \",\n    lineComment: \"//\",\n    fold: \"brace\"\n  };\n});\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  var blockKeywords = \"body catch class do else enum for foreach foreach_reverse if in interface mixin \" +\n                      \"out scope struct switch try union unittest version while with\";\n\n  CodeMirror.defineMIME(\"text/x-d\", {\n    name: \"d\",\n    keywords: words(\"abstract alias align asm assert auto break case cast cdouble cent cfloat const continue \" +\n                    \"debug default delegate delete deprecated export extern final finally function goto immutable \" +\n                    \"import inout invariant is lazy macro module new nothrow override package pragma private \" +\n                    \"protected public pure ref return shared short static super synchronized template this \" +\n                    \"throw typedef typeid typeof volatile __FILE__ __LINE__ __gshared __traits __vector __parameters \" +\n                    blockKeywords),\n    blockKeywords: words(blockKeywords),\n    builtin: words(\"bool byte char creal dchar double float idouble ifloat int ireal long real short ubyte \" +\n                   \"ucent uint ulong ushort wchar wstring void size_t sizediff_t\"),\n    atoms: words(\"exit failure success true false null\"),\n    hooks: {\n      \"@\": function(stream, _state) {\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      }\n    }\n  });\n\n});\n"],"sourceRoot":""}