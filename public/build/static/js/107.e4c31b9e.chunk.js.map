{"version":3,"sources":["../node_modules/codemirror/mode/tiki/tiki.js"],"names":["CodeMirror","defineMode","config","inBlock","style","terminator","returnTokenizer","stream","state","eol","match","tokenize","inText","next","inLine","chain","parser","sol","ch","eat","eatSpace","eatWhile","inPlugin","pluginName","type","curState","setStyle","indentUnit","quote","peek","test","pass","i","arguments","length","cc","push","cont","apply","pushContext","startOfLine","noIndent","context","prev","indent","indented","popContext","element","attributes","err","endcloseplugin","name","attvalue","attvaluemaybe","startState","token","indentation","pop","textAfter","electricChars","defineMIME","mod","require"],"mappings":"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","file":"static/js/107.e4c31b9e.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode('tiki', function(config) {\n  function inBlock(style, terminator, returnTokenizer) {\n    return function(stream, state) {\n      while (!stream.eol()) {\n        if (stream.match(terminator)) {\n          state.tokenize = inText;\n          break;\n        }\n        stream.next();\n      }\n\n      if (returnTokenizer) state.tokenize = returnTokenizer;\n\n      return style;\n    };\n  }\n\n  function inLine(style) {\n    return function(stream, state) {\n      while(!stream.eol()) {\n        stream.next();\n      }\n      state.tokenize = inText;\n      return style;\n    };\n  }\n\n  function inText(stream, state) {\n    function chain(parser) {\n      state.tokenize = parser;\n      return parser(stream, state);\n    }\n\n    var sol = stream.sol();\n    var ch = stream.next();\n\n    //non start of line\n    switch (ch) { //switch is generally much faster than if, so it is used here\n    case \"{\": //plugin\n      stream.eat(\"/\");\n      stream.eatSpace();\n      stream.eatWhile(/[^\\s\\u00a0=\\\"\\'\\/?(}]/);\n      state.tokenize = inPlugin;\n      return \"tag\";\n    case \"_\": //bold\n      if (stream.eat(\"_\"))\n        return chain(inBlock(\"strong\", \"__\", inText));\n      break;\n    case \"'\": //italics\n      if (stream.eat(\"'\"))\n        return chain(inBlock(\"em\", \"''\", inText));\n      break;\n    case \"(\":// Wiki Link\n      if (stream.eat(\"(\"))\n        return chain(inBlock(\"variable-2\", \"))\", inText));\n      break;\n    case \"[\":// Weblink\n      return chain(inBlock(\"variable-3\", \"]\", inText));\n      break;\n    case \"|\": //table\n      if (stream.eat(\"|\"))\n        return chain(inBlock(\"comment\", \"||\"));\n      break;\n    case \"-\":\n      if (stream.eat(\"=\")) {//titleBar\n        return chain(inBlock(\"header string\", \"=-\", inText));\n      } else if (stream.eat(\"-\")) {//deleted\n        return chain(inBlock(\"error tw-deleted\", \"--\", inText));\n      }\n      break;\n    case \"=\": //underline\n      if (stream.match(\"==\"))\n        return chain(inBlock(\"tw-underline\", \"===\", inText));\n      break;\n    case \":\":\n      if (stream.eat(\":\"))\n        return chain(inBlock(\"comment\", \"::\"));\n      break;\n    case \"^\": //box\n      return chain(inBlock(\"tw-box\", \"^\"));\n      break;\n    case \"~\": //np\n      if (stream.match(\"np~\"))\n        return chain(inBlock(\"meta\", \"~/np~\"));\n      break;\n    }\n\n    //start of line types\n    if (sol) {\n      switch (ch) {\n      case \"!\": //header at start of line\n        if (stream.match('!!!!!')) {\n          return chain(inLine(\"header string\"));\n        } else if (stream.match('!!!!')) {\n          return chain(inLine(\"header string\"));\n        } else if (stream.match('!!!')) {\n          return chain(inLine(\"header string\"));\n        } else if (stream.match('!!')) {\n          return chain(inLine(\"header string\"));\n        } else {\n          return chain(inLine(\"header string\"));\n        }\n        break;\n      case \"*\": //unordered list line item, or <li /> at start of line\n      case \"#\": //ordered list line item, or <li /> at start of line\n      case \"+\": //ordered list line item, or <li /> at start of line\n        return chain(inLine(\"tw-listitem bracket\"));\n        break;\n      }\n    }\n\n    //stream.eatWhile(/[&{]/); was eating up plugins, turned off to act less like html and more like tiki\n    return null;\n  }\n\n  var indentUnit = config.indentUnit;\n\n  // Return variables for tokenizers\n  var pluginName, type;\n  function inPlugin(stream, state) {\n    var ch = stream.next();\n    var peek = stream.peek();\n\n    if (ch == \"}\") {\n      state.tokenize = inText;\n      //type = ch == \")\" ? \"endPlugin\" : \"selfclosePlugin\"; inPlugin\n      return \"tag\";\n    } else if (ch == \"(\" || ch == \")\") {\n      return \"bracket\";\n    } else if (ch == \"=\") {\n      type = \"equals\";\n\n      if (peek == \">\") {\n        stream.next();\n        peek = stream.peek();\n      }\n\n      //here we detect values directly after equal character with no quotes\n      if (!/[\\'\\\"]/.test(peek)) {\n        state.tokenize = inAttributeNoQuote();\n      }\n      //end detect values\n\n      return \"operator\";\n    } else if (/[\\'\\\"]/.test(ch)) {\n      state.tokenize = inAttribute(ch);\n      return state.tokenize(stream, state);\n    } else {\n      stream.eatWhile(/[^\\s\\u00a0=\\\"\\'\\/?]/);\n      return \"keyword\";\n    }\n  }\n\n  function inAttribute(quote) {\n    return function(stream, state) {\n      while (!stream.eol()) {\n        if (stream.next() == quote) {\n          state.tokenize = inPlugin;\n          break;\n        }\n      }\n      return \"string\";\n    };\n  }\n\n  function inAttributeNoQuote() {\n    return function(stream, state) {\n      while (!stream.eol()) {\n        var ch = stream.next();\n        var peek = stream.peek();\n        if (ch == \" \" || ch == \",\" || /[ )}]/.test(peek)) {\n      state.tokenize = inPlugin;\n      break;\n    }\n  }\n  return \"string\";\n};\n                     }\n\nvar curState, setStyle;\nfunction pass() {\n  for (var i = arguments.length - 1; i >= 0; i--) curState.cc.push(arguments[i]);\n}\n\nfunction cont() {\n  pass.apply(null, arguments);\n  return true;\n}\n\nfunction pushContext(pluginName, startOfLine) {\n  var noIndent = curState.context && curState.context.noIndent;\n  curState.context = {\n    prev: curState.context,\n    pluginName: pluginName,\n    indent: curState.indented,\n    startOfLine: startOfLine,\n    noIndent: noIndent\n  };\n}\n\nfunction popContext() {\n  if (curState.context) curState.context = curState.context.prev;\n}\n\nfunction element(type) {\n  if (type == \"openPlugin\") {curState.pluginName = pluginName; return cont(attributes, endplugin(curState.startOfLine));}\n  else if (type == \"closePlugin\") {\n    var err = false;\n    if (curState.context) {\n      err = curState.context.pluginName != pluginName;\n      popContext();\n    } else {\n      err = true;\n    }\n    if (err) setStyle = \"error\";\n    return cont(endcloseplugin(err));\n  }\n  else if (type == \"string\") {\n    if (!curState.context || curState.context.name != \"!cdata\") pushContext(\"!cdata\");\n    if (curState.tokenize == inText) popContext();\n    return cont();\n  }\n  else return cont();\n}\n\nfunction endplugin(startOfLine) {\n  return function(type) {\n    if (\n      type == \"selfclosePlugin\" ||\n        type == \"endPlugin\"\n    )\n      return cont();\n    if (type == \"endPlugin\") {pushContext(curState.pluginName, startOfLine); return cont();}\n    return cont();\n  };\n}\n\nfunction endcloseplugin(err) {\n  return function(type) {\n    if (err) setStyle = \"error\";\n    if (type == \"endPlugin\") return cont();\n    return pass();\n  };\n}\n\nfunction attributes(type) {\n  if (type == \"keyword\") {setStyle = \"attribute\"; return cont(attributes);}\n  if (type == \"equals\") return cont(attvalue, attributes);\n  return pass();\n}\nfunction attvalue(type) {\n  if (type == \"keyword\") {setStyle = \"string\"; return cont();}\n  if (type == \"string\") return cont(attvaluemaybe);\n  return pass();\n}\nfunction attvaluemaybe(type) {\n  if (type == \"string\") return cont(attvaluemaybe);\n  else return pass();\n}\nreturn {\n  startState: function() {\n    return {tokenize: inText, cc: [], indented: 0, startOfLine: true, pluginName: null, context: null};\n  },\n  token: function(stream, state) {\n    if (stream.sol()) {\n      state.startOfLine = true;\n      state.indented = stream.indentation();\n    }\n    if (stream.eatSpace()) return null;\n\n    setStyle = type = pluginName = null;\n    var style = state.tokenize(stream, state);\n    if ((style || type) && style != \"comment\") {\n      curState = state;\n      while (true) {\n        var comb = state.cc.pop() || element;\n        if (comb(type || style)) break;\n      }\n    }\n    state.startOfLine = false;\n    return setStyle || style;\n  },\n  indent: function(state, textAfter) {\n    var context = state.context;\n    if (context && context.noIndent) return 0;\n    if (context && /^{\\//.test(textAfter))\n        context = context.prev;\n    while (context && !context.startOfLine)\n        context = context.prev;\n    if (context) return context.indent + indentUnit;\n    else return 0;\n  },\n  electricChars: \"/\"\n};\n});\n\nCodeMirror.defineMIME(\"text/tiki\", \"tiki\");\n\n});\n"],"sourceRoot":""}