{"version":3,"sources":["../node_modules/codemirror/mode/turtle/turtle.js"],"names":["CodeMirror","defineMode","config","curPunc","indentUnit","wordRegexp","words","RegExp","join","keywords","operatorChars","tokenBase","stream","state","quote","ch","next","match","tokenize","escaped","test","skipToEnd","eatWhile","peek","word","current","pushContext","type","col","context","prev","indent","popContext","startState","token","sol","align","indentation","eatSpace","style","column","textAfter","firstChar","charAt","closing","lineComment","defineMIME","mod","require"],"mappings":"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","file":"static/js/112.4f538e05.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"turtle\", function(config) {\n  var indentUnit = config.indentUnit;\n  var curPunc;\n\n  function wordRegexp(words) {\n    return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n  }\n  var ops = wordRegexp([]);\n  var keywords = wordRegexp([\"@prefix\", \"@base\", \"a\"]);\n  var operatorChars = /[*+\\-<>=&|]/;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    curPunc = null;\n    if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n      stream.match(/^[^\\s\\u00a0>]*>?/);\n      return \"atom\";\n    }\n    else if (ch == \"\\\"\" || ch == \"'\") {\n      state.tokenize = tokenLiteral(ch);\n      return state.tokenize(stream, state);\n    }\n    else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    else if (ch == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    else if (operatorChars.test(ch)) {\n      stream.eatWhile(operatorChars);\n      return null;\n    }\n    else if (ch == \":\") {\n          return \"operator\";\n        } else {\n      stream.eatWhile(/[_\\w\\d]/);\n      if(stream.peek() == \":\") {\n        return \"variable-3\";\n      } else {\n             var word = stream.current();\n\n             if(keywords.test(word)) {\n                        return \"meta\";\n             }\n\n             if(ch >= \"A\" && ch <= \"Z\") {\n                    return \"comment\";\n                 } else {\n                        return \"keyword\";\n                 }\n      }\n      var word = stream.current();\n      if (ops.test(word))\n        return null;\n      else if (keywords.test(word))\n        return \"meta\";\n      else\n        return \"variable\";\n    }\n  }\n\n  function tokenLiteral(quote) {\n    return function(stream, state) {\n      var escaped = false, ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && !escaped) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        escaped = !escaped && ch == \"\\\\\";\n      }\n      return \"string\";\n    };\n  }\n\n  function pushContext(state, type, col) {\n    state.context = {prev: state.context, indent: state.indent, col: col, type: type};\n  }\n  function popContext(state) {\n    state.indent = state.context.indent;\n    state.context = state.context.prev;\n  }\n\n  return {\n    startState: function() {\n      return {tokenize: tokenBase,\n              context: null,\n              indent: 0,\n              col: 0};\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (state.context && state.context.align == null) state.context.align = false;\n        state.indent = stream.indentation();\n      }\n      if (stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n\n      if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n        state.context.align = true;\n      }\n\n      if (curPunc == \"(\") pushContext(state, \")\", stream.column());\n      else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());\n      else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());\n      else if (/[\\]\\}\\)]/.test(curPunc)) {\n        while (state.context && state.context.type == \"pattern\") popContext(state);\n        if (state.context && curPunc == state.context.type) popContext(state);\n      }\n      else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);\n      else if (/atom|string|variable/.test(style) && state.context) {\n        if (/[\\}\\]]/.test(state.context.type))\n          pushContext(state, \"pattern\", stream.column());\n        else if (state.context.type == \"pattern\" && !state.context.align) {\n          state.context.align = true;\n          state.context.col = stream.column();\n        }\n      }\n\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      var firstChar = textAfter && textAfter.charAt(0);\n      var context = state.context;\n      if (/[\\]\\}]/.test(firstChar))\n        while (context && context.type == \"pattern\") context = context.prev;\n\n      var closing = context && firstChar == context.type;\n      if (!context)\n        return 0;\n      else if (context.type == \"pattern\")\n        return context.col;\n      else if (context.align)\n        return context.col + (closing ? 0 : 1);\n      else\n        return context.indent + (closing ? 0 : indentUnit);\n    },\n\n    lineComment: \"#\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/turtle\", \"turtle\");\n\n});\n"],"sourceRoot":""}