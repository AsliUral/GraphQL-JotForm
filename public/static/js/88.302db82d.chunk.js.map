{"version":3,"sources":["../node_modules/codemirror/mode/r/r.js"],"names":["CodeMirror","registerHelper","defineMode","config","wordObj","words","res","i","length","commonAtoms","commonBuiltins","commonKeywords","concat","curPunc","atoms","builtins","keywords","blockkeywords","opChars","tokenBase","stream","state","quote","ch","next","skipToEnd","eat","eatWhile","match","test","tokenize","skipTo","backUp","word","current","propertyIsEnumerable","ctx","argList","push","type","indent","flags","column","prev","setFlag","flag","pop","startState","indentUnit","afterIdent","token","sol","indentation","eatSpace","style","textAfter","firstChar","charAt","closing","lineComment","defineMIME","mod","require"],"mappings":"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","file":"static/js/88.302db82d.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"wordChars\", \"r\", /[\\w.]/);\n\nCodeMirror.defineMode(\"r\", function(config) {\n  function wordObj(words) {\n    var res = {};\n    for (var i = 0; i < words.length; ++i) res[words[i]] = true;\n    return res;\n  }\n  var commonAtoms = [\"NULL\", \"NA\", \"Inf\", \"NaN\", \"NA_integer_\", \"NA_real_\", \"NA_complex_\", \"NA_character_\", \"TRUE\", \"FALSE\"];\n  var commonBuiltins = [\"list\", \"quote\", \"bquote\", \"eval\", \"return\", \"call\", \"parse\", \"deparse\"];\n  var commonKeywords = [\"if\", \"else\", \"repeat\", \"while\", \"function\", \"for\", \"in\", \"next\", \"break\"];\n  var commonBlockKeywords = [\"if\", \"else\", \"repeat\", \"while\", \"function\", \"for\"];\n\n  CodeMirror.registerHelper(\"hintWords\", \"r\", commonAtoms.concat(commonBuiltins, commonKeywords));\n\n  var atoms = wordObj(commonAtoms);\n  var builtins = wordObj(commonBuiltins);\n  var keywords = wordObj(commonKeywords);\n  var blockkeywords = wordObj(commonBlockKeywords);\n  var opChars = /[+\\-*\\/^<>=!&|~$:]/;\n  var curPunc;\n\n  function tokenBase(stream, state) {\n    curPunc = null;\n    var ch = stream.next();\n    if (ch == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    } else if (ch == \"0\" && stream.eat(\"x\")) {\n      stream.eatWhile(/[\\da-f]/i);\n      return \"number\";\n    } else if (ch == \".\" && stream.eat(/\\d/)) {\n      stream.match(/\\d*(?:e[+\\-]?\\d+)?/);\n      return \"number\";\n    } else if (/\\d/.test(ch)) {\n      stream.match(/\\d*(?:\\.\\d+)?(?:e[+\\-]\\d+)?L?/);\n      return \"number\";\n    } else if (ch == \"'\" || ch == '\"') {\n      state.tokenize = tokenString(ch);\n      return \"string\";\n    } else if (ch == \"`\") {\n      stream.match(/[^`]+`/);\n      return \"variable-3\";\n    } else if (ch == \".\" && stream.match(/.[.\\d]+/)) {\n      return \"keyword\";\n    } else if (/[\\w\\.]/.test(ch) && ch != \"_\") {\n      stream.eatWhile(/[\\w\\.]/);\n      var word = stream.current();\n      if (atoms.propertyIsEnumerable(word)) return \"atom\";\n      if (keywords.propertyIsEnumerable(word)) {\n        // Block keywords start new blocks, except 'else if', which only starts\n        // one new block for the 'if', no block for the 'else'.\n        if (blockkeywords.propertyIsEnumerable(word) &&\n            !stream.match(/\\s*if(\\s+|$)/, false))\n          curPunc = \"block\";\n        return \"keyword\";\n      }\n      if (builtins.propertyIsEnumerable(word)) return \"builtin\";\n      return \"variable\";\n    } else if (ch == \"%\") {\n      if (stream.skipTo(\"%\")) stream.next();\n      return \"operator variable-2\";\n    } else if (\n        (ch == \"<\" && stream.eat(\"-\")) ||\n        (ch == \"<\" && stream.match(\"<-\")) ||\n        (ch == \"-\" && stream.match(/>>?/))\n      ) {\n      return \"operator arrow\";\n    } else if (ch == \"=\" && state.ctx.argList) {\n      return \"arg-is\";\n    } else if (opChars.test(ch)) {\n      if (ch == \"$\") return \"operator dollar\";\n      stream.eatWhile(opChars);\n      return \"operator\";\n    } else if (/[\\(\\){}\\[\\];]/.test(ch)) {\n      curPunc = ch;\n      if (ch == \";\") return \"semi\";\n      return null;\n    } else {\n      return null;\n    }\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      if (stream.eat(\"\\\\\")) {\n        var ch = stream.next();\n        if (ch == \"x\") stream.match(/^[a-f0-9]{2}/i);\n        else if ((ch == \"u\" || ch == \"U\") && stream.eat(\"{\") && stream.skipTo(\"}\")) stream.next();\n        else if (ch == \"u\") stream.match(/^[a-f0-9]{4}/i);\n        else if (ch == \"U\") stream.match(/^[a-f0-9]{8}/i);\n        else if (/[0-7]/.test(ch)) stream.match(/^[0-7]{1,2}/);\n        return \"string-2\";\n      } else {\n        var next;\n        while ((next = stream.next()) != null) {\n          if (next == quote) { state.tokenize = tokenBase; break; }\n          if (next == \"\\\\\") { stream.backUp(1); break; }\n        }\n        return \"string\";\n      }\n    };\n  }\n\n  var ALIGN_YES = 1, ALIGN_NO = 2, BRACELESS = 4\n\n  function push(state, type, stream) {\n    state.ctx = {type: type,\n                 indent: state.indent,\n                 flags: 0,\n                 column: stream.column(),\n                 prev: state.ctx};\n  }\n  function setFlag(state, flag) {\n    var ctx = state.ctx\n    state.ctx = {type: ctx.type,\n                 indent: ctx.indent,\n                 flags: ctx.flags | flag,\n                 column: ctx.column,\n                 prev: ctx.prev}\n  }\n  function pop(state) {\n    state.indent = state.ctx.indent;\n    state.ctx = state.ctx.prev;\n  }\n\n  return {\n    startState: function() {\n      return {tokenize: tokenBase,\n              ctx: {type: \"top\",\n                    indent: -config.indentUnit,\n                    flags: ALIGN_NO},\n              indent: 0,\n              afterIdent: false};\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if ((state.ctx.flags & 3) == 0) state.ctx.flags |= ALIGN_NO\n        if (state.ctx.flags & BRACELESS) pop(state)\n        state.indent = stream.indentation();\n      }\n      if (stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (style != \"comment\" && (state.ctx.flags & ALIGN_NO) == 0) setFlag(state, ALIGN_YES)\n\n      if ((curPunc == \";\" || curPunc == \"{\" || curPunc == \"}\") && state.ctx.type == \"block\") pop(state);\n      if (curPunc == \"{\") push(state, \"}\", stream);\n      else if (curPunc == \"(\") {\n        push(state, \")\", stream);\n        if (state.afterIdent) state.ctx.argList = true;\n      }\n      else if (curPunc == \"[\") push(state, \"]\", stream);\n      else if (curPunc == \"block\") push(state, \"block\", stream);\n      else if (curPunc == state.ctx.type) pop(state);\n      else if (state.ctx.type == \"block\" && style != \"comment\") setFlag(state, BRACELESS)\n      state.afterIdent = style == \"variable\" || style == \"keyword\";\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), ctx = state.ctx,\n          closing = firstChar == ctx.type;\n      if (ctx.flags & BRACELESS) ctx = ctx.prev\n      if (ctx.type == \"block\") return ctx.indent + (firstChar == \"{\" ? 0 : config.indentUnit);\n      else if (ctx.flags & ALIGN_YES) return ctx.column + (closing ? 0 : 1);\n      else return ctx.indent + (closing ? 0 : config.indentUnit);\n    },\n\n    lineComment: \"#\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-rsrc\", \"r\");\n\n});\n"],"sourceRoot":""}