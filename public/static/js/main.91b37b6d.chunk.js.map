{"version":3,"sources":["components/UserQuery.js","components/AceEditorJS.js","components/AceEditorGraphql.js","App.js","serviceWorker.js","index.js"],"names":["User_QUERY","gql","React","Component","AceEditorJS","props","onChange","newValue","setState","codeJS","console","log","prettify","format","state","play","Button","animated","onClick","this","Content","hidden","visible","Icon","name","mode","theme","style","position","right","width","value","enableSnippets","enableLiveAutocompletion","enableBasicAutocompletion","highlightActiveLine","editorProps","$blockScrolling","setOptions","wrapBehavioursEnabled","AceEditorGraphql","codeGraphql","left","client","ApolloClient","uri","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yqBAKA,IAAMA,EAAaC,IAAH,KAcQC,IAAMC,U,6SCNXF,IAAH,KAAhB,IAwEeG,E,kDAzDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAKVC,SAAW,SAACC,GACR,EAAKC,SAAS,CACVC,OAAQF,IAEZG,QAAQC,IAAI,SAAUJ,IAVP,EAYnBK,SAAW,WACP,EAAKJ,SAAS,CACVC,OAAQI,iBAAO,EAAKC,MAAML,WAdf,EAiBnBM,KAAO,WACH,EAAKT,SAAS,SAhBd,EAAKQ,MAAQ,CACTL,OAAQ,IAHG,E,qDAqBf,OACI,oCACI,kBAACO,EAAA,EAAD,CAAQC,SAAS,WAAWC,QAASC,KAAKJ,MACtC,kBAACC,EAAA,EAAOI,QAAR,CAAgBC,QAAM,GAAtB,OACA,kBAACL,EAAA,EAAOI,QAAR,CAAgBE,SAAO,GACnB,kBAACC,EAAA,EAAD,CAAMC,KAAK,0BAGnB,kBAAC,IAAD,CACIC,KAAK,aACLC,MAAM,UACNC,MAAO,CACHC,SAAU,WACVC,MAAO,OACPC,MAAO,SAEXC,MAAOZ,KAAKL,MAAML,OAClBH,SAAUa,KAAKb,SACfkB,KAAK,mBACLQ,gBAAgB,EAChBC,0BAA0B,EAC1BC,2BAA2B,EAC3BC,qBAAqB,EACrBC,YAAa,CAAEC,iBAAiB,GAChCC,WAAY,CACRJ,2BAA2B,EAC3BD,0BAA0B,EAC1BD,gBAAgB,EAChBO,uBAAuB,U,GAlDrBrC,IAAMC,W,6SCbbF,IAAH,KAAhB,IAsEeuC,E,kDAvDX,WAAYnC,GAAQ,IAAD,8BACf,cAAMA,IAKVC,SAAW,SAACC,GACR,EAAKC,SAAS,CACViC,YAAalC,IAEjBG,QAAQC,IAAI,SAAUJ,IAVP,EAYnBK,SAAW,WACP,EAAKJ,SAAS,CACViC,YAAa5B,iBAAO,EAAKC,MAAM2B,gBAZnC,EAAK3B,MAAQ,CACT2B,YAAa,IAHF,E,qDAkBf,OACI,oCACI,kBAACzB,EAAA,EAAD,CAAQC,SAAS,WAAWC,QAASC,KAAKP,UACtC,kBAACI,EAAA,EAAOI,QAAR,CAAgBC,QAAM,GAAtB,YACA,kBAACL,EAAA,EAAOI,QAAR,CAAgBE,SAAO,GACnB,kBAACC,EAAA,EAAD,CAAMC,KAAK,WAGnB,kBAAC,IAAD,CACIC,KAAK,gBACLC,MAAM,UACNC,MAAO,CACHC,SAAU,WACVc,KAAM,OACNZ,MAAO,SAEXC,MAAOZ,KAAKL,MAAM2B,YAClBnC,SAAUa,KAAKb,SACfkB,KAAK,mBACLQ,gBAAgB,EAChBC,0BAA0B,EAC1BC,2BAA2B,EAC3BC,qBAAqB,EACrBC,YAAa,CAAEC,iBAAiB,GAChCC,WAAY,CACRJ,2BAA2B,EAC3BD,0BAA0B,EAC1BD,gBAAgB,EAChBO,uBAAuB,KAG/B,kBAAC,EAAD,CAAaE,YAAatB,KAAKL,MAAM2B,mB,GAlDtBvC,IAAMC,W,QCtB/BwC,G,cAAS,IAAIC,IAAa,CAC5BC,IAAK,cAgBMC,E,uKAXP,OACI,kBAAC,IAAD,CAAgBH,OAAQA,GACpB,yBAAKI,UAAU,aACX,wCAEJ,kBAAC,EAAD,W,GAPE5C,aCEE6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMC,c","file":"static/js/main.91b37b6d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport gql from \"graphql-tag\";\r\nimport { Query } from \"react-apollo\";\r\n\r\nconst User_QUERY = gql`\r\n    query UserQuery {\r\n        user {\r\n            name\r\n            email\r\n            time_zone\r\n            account_type\r\n            status\r\n            loginToGetSubmissions\r\n            pdf_designer_group\r\n        }\r\n    }\r\n`;\r\n\r\nclass UserQuery extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            codeGraphql: \"graph\",\r\n            codeJS: \"JS\",\r\n        };\r\n    }\r\n    render() {\r\n        return (\r\n            <Query query={User_QUERY}>\r\n                {({ loading, error, data }) => {\r\n                    if (loading) return <h4> Loading ...</h4>;\r\n                    if (error) console.log(error);\r\n                    //console.log(data.user);\r\n                    return data.user.name;\r\n                }}\r\n            </Query>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserQuery;\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport AceEditor from \"react-ace\";\r\nimport { format } from \"graphql-formatter\";\r\nimport \"ace-builds/src-noconflict/mode-graphqlschema\";\r\nimport \"ace-builds/src-noconflict/mode-javascript\";\r\nimport \"ace-builds/src-noconflict/theme-dracula\";\r\nimport \"ace-builds/src-noconflict/ext-language_tools\";\r\nimport { Button, Icon } from \"semantic-ui-react\";\r\nimport gql from \"graphql-tag\";\r\nimport { Query } from \"react-apollo\";\r\nimport UserQuery from \"./UserQuery\";\r\n\r\nconst User_QUERY = gql`\r\n    query UserQuery {\r\n        user {\r\n            name\r\n            email\r\n            time_zone\r\n            account_type\r\n            status\r\n            loginToGetSubmissions\r\n            pdf_designer_group\r\n        }\r\n    }\r\n`;\r\n\r\nclass AceEditorJS extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            codeJS: \"\",\r\n        };\r\n    }\r\n    onChange = (newValue) => {\r\n        this.setState({\r\n            codeJS: newValue,\r\n        });\r\n        console.log(\"change\", newValue);\r\n    };\r\n    prettify = () => {\r\n        this.setState({\r\n            codeJS: format(this.state.codeJS),\r\n        });\r\n    };\r\n    play = () => {\r\n        this.onChange(\"Asli\");\r\n    };\r\n    render() {\r\n        return (\r\n            <>\r\n                <Button animated=\"vertical\" onClick={this.play}>\r\n                    <Button.Content hidden>Run</Button.Content>\r\n                    <Button.Content visible>\r\n                        <Icon name=\"play circle outline\" />\r\n                    </Button.Content>\r\n                </Button>\r\n                <AceEditor\r\n                    mode=\"javascript\"\r\n                    theme=\"dracula\"\r\n                    style={{\r\n                        position: \"absolute\",\r\n                        right: \"40px\",\r\n                        width: \"700px\",\r\n                    }}\r\n                    value={this.state.codeJS}\r\n                    onChange={this.onChange}\r\n                    name=\"UNIQUE_ID_OF_DIV\"\r\n                    enableSnippets={true}\r\n                    enableLiveAutocompletion={true}\r\n                    enableBasicAutocompletion={true}\r\n                    highlightActiveLine={true}\r\n                    editorProps={{ $blockScrolling: true }}\r\n                    setOptions={{\r\n                        enableBasicAutocompletion: true,\r\n                        enableLiveAutocompletion: true,\r\n                        enableSnippets: true,\r\n                        wrapBehavioursEnabled: true,\r\n                    }}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AceEditorJS;\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport AceEditor from \"react-ace\";\r\nimport { format } from \"graphql-formatter\";\r\nimport \"ace-builds/src-noconflict/mode-graphqlschema\";\r\nimport \"ace-builds/src-noconflict/mode-javascript\";\r\nimport \"ace-builds/src-noconflict/theme-dracula\";\r\nimport \"ace-builds/src-noconflict/ext-language_tools\";\r\nimport { Button, Icon } from \"semantic-ui-react\";\r\nimport gql from \"graphql-tag\";\r\nimport { Query } from \"react-apollo\";\r\nimport UserQuery from \"./UserQuery\";\r\nimport AceEditorJS from \"./AceEditorJS\";\r\n\r\nconst User_QUERY = gql`\r\n    query UserQuery {\r\n        user {\r\n            name\r\n            email\r\n            time_zone\r\n            account_type\r\n            status\r\n            loginToGetSubmissions\r\n            pdf_designer_group\r\n        }\r\n    }\r\n`;\r\n\r\nclass AceEditorGraphql extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            codeGraphql: \"\",\r\n        };\r\n    }\r\n    onChange = (newValue) => {\r\n        this.setState({\r\n            codeGraphql: newValue,\r\n        });\r\n        console.log(\"change\", newValue);\r\n    };\r\n    prettify = () => {\r\n        this.setState({\r\n            codeGraphql: format(this.state.codeGraphql),\r\n        });\r\n    };\r\n    render() {\r\n        return (\r\n            <>\r\n                <Button animated=\"vertical\" onClick={this.prettify}>\r\n                    <Button.Content hidden>Prettify</Button.Content>\r\n                    <Button.Content visible>\r\n                        <Icon name=\"leaf\" />\r\n                    </Button.Content>\r\n                </Button>\r\n                <AceEditor\r\n                    mode=\"graphqlschema\"\r\n                    theme=\"dracula\"\r\n                    style={{\r\n                        position: \"absolute\",\r\n                        left: \"40px\",\r\n                        width: \"700px\",\r\n                    }}\r\n                    value={this.state.codeGraphql}\r\n                    onChange={this.onChange}\r\n                    name=\"UNIQUE_ID_OF_DIV\"\r\n                    enableSnippets={true}\r\n                    enableLiveAutocompletion={true}\r\n                    enableBasicAutocompletion={true}\r\n                    highlightActiveLine={true}\r\n                    editorProps={{ $blockScrolling: true }}\r\n                    setOptions={{\r\n                        enableBasicAutocompletion: true,\r\n                        enableLiveAutocompletion: true,\r\n                        enableSnippets: true,\r\n                        wrapBehavioursEnabled: true,\r\n                    }}\r\n                />\r\n                <AceEditorJS codeGraphql={this.state.codeGraphql} />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AceEditorGraphql;\r\n","import React, { Component } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport AceEditorGraphql from \"./components/AceEditorGraphql\";\nimport { ApolloProvider } from \"react-apollo\";\nimport \"./App.css\";\nimport \"bootswatch/dist/solar/bootstrap.min.css\";\nconst client = new ApolloClient({\n    uri: \"/graphql\",\n});\n\nclass App extends Component {\n    render() {\n        return (\n            <ApolloProvider client={client}>\n                <div className=\"container\">\n                    <h1>GraphQL</h1>\n                </div>\n                <AceEditorGraphql />\n            </ApolloProvider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}