{"version":3,"sources":["components/CopyToClipboard.js","components/HistoryModal.js","components/AceEditorJS.js","components/PopupIcon.js","components/QueryResult.js","components/AceEditorGraphql.js","App.js","serviceWorker.js","index.js"],"names":["CopyClipBoard","props","text","this","copy","style","position","right","Button","animated","Content","hidden","visible","Icon","name","React","Component","HistoryModal","Modal","trigger","height","top","left","bottom","Header","Description","historyArray","map","history","AceEditorJS","src","codeJS","width","theme","PopupIcon","Fragment","Popup","content","helper","header","Image","avatar","QueryResult","play","setState","currentQuery","gql","codeGraphql","queryText","buttonClick","push","setData","data","state","copied","onClick","CopyToClipboard","query","loading","error","console","log","user","AceEditorGraphql","onChange","newValue","prettify","format","mode","value","enableSnippets","enableLiveAutocompletion","enableBasicAutocompletion","highlightActiveLine","editorProps","$blockScrolling","setOptions","wrapBehavioursEnabled","client","ApolloClient","uri","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.da1a5bb5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button, Icon, Modal } from \"semantic-ui-react\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\n\r\nclass CopyClipBoard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <CopyToClipboard\r\n                text={this.props.copy}\r\n                style={{\r\n                    position: \"absolute\",\r\n                    right: \"40px\",\r\n                }}\r\n            >\r\n                <Button animated=\"vertical\">\r\n                    <Button.Content hidden>Copy</Button.Content>\r\n                    <Button.Content visible>\r\n                        <Icon name=\"copy\" />\r\n                    </Button.Content>\r\n                </Button>\r\n            </CopyToClipboard>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CopyClipBoard;\r\n","import React from \"react\";\r\nimport { Button, Icon, Modal } from \"semantic-ui-react\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\n\r\nclass HistoryModal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                <Modal\r\n                    trigger={\r\n                        <Button animated=\"vertical\">\r\n                            <Button.Content hidden>History</Button.Content>\r\n                            <Button.Content visible>\r\n                                <Icon name=\"history\" />\r\n                            </Button.Content>\r\n                        </Button>\r\n                    }\r\n                    style={{\r\n                        height: \"auto\",\r\n                        top: \"auto\",\r\n                        left: \"auto\",\r\n                        bottom: \"auto\",\r\n                        right: \"auto\",\r\n                    }}\r\n                >\r\n                    <Modal.Header>History of Query</Modal.Header>\r\n                    <Modal.Content>\r\n                        <Modal.Description>\r\n                            {this.props.historyArray.map((history) => (\r\n                                <h2>\r\n                                    {\" \"}\r\n                                    {history}\r\n                                    <CopyToClipboard text={history}>\r\n                                        <Button animated=\"vertical\">\r\n                                            <Button.Content hidden>\r\n                                                Copy\r\n                                            </Button.Content>\r\n                                            <Button.Content visible>\r\n                                                <Icon name=\"copy\" />\r\n                                            </Button.Content>\r\n                                        </Button>\r\n                                    </CopyToClipboard>\r\n                                    <br></br>\r\n                                </h2>\r\n                            ))}\r\n                        </Modal.Description>\r\n                    </Modal.Content>\r\n                </Modal>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HistoryModal;\r\n","import React from \"react\";\r\nimport AceEditor from \"react-ace\";\r\nimport \"ace-builds/src-noconflict/mode-json\";\r\nimport \"ace-builds/src-noconflict/theme-dracula\";\r\nimport \"ace-builds/src-noconflict/ext-language_tools\";\r\nimport ReactJson from \"react-json-view\";\r\n\r\nclass AceEditorJS extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                <ReactJson\r\n                    src={this.props.codeJS}\r\n                    style={{\r\n                        position: \"absolute\",\r\n                        right: \"40px\",\r\n                        width: \"700px\",\r\n                    }}\r\n                    theme=\"ocean\"\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AceEditorJS;\r\n","import React from \"react\";\r\nimport { Button, Icon, Popup, Image } from \"semantic-ui-react\";\r\n\r\nclass PopupIcon extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {\r\n                    <Popup\r\n                        content={this.helper}\r\n                        header=\"If you help , you can check https://graphql.org/\"\r\n                        position=\"bottom\"\r\n                        trigger={\r\n                            <Image\r\n                                src=\"https://semantic-ui.com/images/avatar/small/stevie.jpg\"\r\n                                avatar\r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PopupIcon;\r\n","import React from \"react\";\r\nimport { Button, Icon } from \"semantic-ui-react\";\r\nimport \"ace-builds/src-noconflict/mode-graphqlschema\";\r\nimport \"ace-builds/src-noconflict/mode-javascript\";\r\nimport \"ace-builds/src-noconflict/theme-dracula\";\r\nimport \"ace-builds/src-noconflict/ext-language_tools\";\r\nimport gql from \"graphql-tag\";\r\nimport { Query } from \"react-apollo\";\r\nimport CopyToClipboard from \"./CopyToClipboard\";\r\nimport HistoryModal from \"./HistoryModal\";\r\nimport AceEditorJS from \"./AceEditorJS\";\r\nimport PopupIcon from \"./PopupIcon\";\r\n\r\nclass QueryResult extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            codeJS: {},\r\n            copied: false,\r\n            queryText: \"\",\r\n            currentQuery: gql`\r\n                {\r\n                    ${`queryText`}\r\n                }\r\n            `,\r\n            buttonClick: false,\r\n        };\r\n        this.historyArray = [];\r\n    }\r\n\r\n    //run query\r\n    play = () => {\r\n        this.setState({\r\n            currentQuery: gql`\r\n                ${this.props.codeGraphql}\r\n            `,\r\n            queryText: this.props.codeGraphql,\r\n        });\r\n        this.setState({\r\n            buttonClick: true,\r\n        });\r\n        const User_QUERY = gql`\r\n            ${this.props.codeGraphql}\r\n        `;\r\n        this.historyArray.push(this.props.codeGraphql + \" \\n\");\r\n    };\r\n    //set aceEditorJs data\r\n    setData = (data) => {\r\n        this.setState({\r\n            codeJS: data,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Button animated=\"vertical\" onClick={this.play}>\r\n                    <Button.Content hidden>Run</Button.Content>\r\n                    <Button.Content visible>\r\n                        <Icon name=\"play circle outline\" />\r\n                    </Button.Content>\r\n                </Button>\r\n                <HistoryModal historyArray={this.historyArray} />\r\n                <CopyToClipboard copy={this.state.codeJS} />\r\n                <AceEditorJS codeJS={this.state.codeJS} />\r\n                {this.state.buttonClick === true ? (\r\n                    <Query query={this.state.currentQuery}>\r\n                        {({ loading, error, data }) => {\r\n                            if (loading) return <h4> Loading ...</h4>;\r\n                            if (error) console.log(error);\r\n                            this.setData(data);\r\n                            this.setState({\r\n                                codeJS: data,\r\n                            });\r\n                            this.setState({\r\n                                buttonClick: false,\r\n                            });\r\n                            return data.user.name;\r\n                        }}\r\n                    </Query>\r\n                ) : null}\r\n                <PopupIcon />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QueryResult;\r\n","import React from \"react\";\r\nimport AceEditor from \"react-ace\";\r\nimport { format } from \"graphql-formatter\";\r\nimport \"ace-builds/src-noconflict/mode-graphqlschema\";\r\nimport \"ace-builds/src-noconflict/mode-javascript\";\r\nimport \"ace-builds/src-noconflict/theme-dracula\";\r\nimport \"ace-builds/src-noconflict/ext-language_tools\";\r\nimport { Button, Icon } from \"semantic-ui-react\";\r\nimport QueryResult from \"./QueryResult\";\r\n\r\nclass AceEditorGraphql extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            codeGraphql: \"\",\r\n        };\r\n    }\r\n    onChange = (newValue) => {\r\n        this.setState({\r\n            codeGraphql: newValue,\r\n        });\r\n    };\r\n    prettify = () => {\r\n        this.setState({\r\n            codeGraphql: format(this.state.codeGraphql),\r\n        });\r\n    };\r\n    render() {\r\n        return (\r\n            <>\r\n                <Button animated=\"vertical\" onClick={this.prettify}>\r\n                    <Button.Content hidden>Prettify</Button.Content>\r\n                    <Button.Content visible>\r\n                        <Icon name=\"leaf\" />\r\n                    </Button.Content>\r\n                </Button>\r\n                <AceEditor\r\n                    mode=\"graphqlschema\"\r\n                    theme=\"dracula\"\r\n                    style={{\r\n                        position: \"absolute\",\r\n                        left: \"40px\",\r\n                        width: \"700px\",\r\n                    }}\r\n                    value={this.state.codeGraphql}\r\n                    onChange={this.onChange}\r\n                    name=\"UNIQUE_ID_OF_DIV\"\r\n                    enableSnippets={true}\r\n                    enableLiveAutocompletion={true}\r\n                    enableBasicAutocompletion={true}\r\n                    highlightActiveLine={true}\r\n                    editorProps={{ $blockScrolling: true }}\r\n                    setOptions={{\r\n                        enableBasicAutocompletion: true,\r\n                        enableLiveAutocompletion: true,\r\n                        enableSnippets: true,\r\n                        wrapBehavioursEnabled: true,\r\n                    }}\r\n                />\r\n                <QueryResult codeGraphql={this.state.codeGraphql} />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AceEditorGraphql;\r\n","import React, { Component } from \"react\";\r\nimport ApolloClient from \"apollo-boost\";\r\nimport AceEditorGraphql from \"./components/AceEditorGraphql\";\r\nimport { ApolloProvider } from \"react-apollo\";\r\nimport \"./App.css\";\r\nimport \"bootswatch/dist/solar/bootstrap.min.css\";\r\nconst client = new ApolloClient({\r\n    uri: \"/graphql\",\r\n});\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <ApolloProvider client={client}>\r\n                <div className=\"container\">\r\n                    <h1>GraphQL</h1>\r\n                </div>\r\n                <AceEditorGraphql />\r\n            </ApolloProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}