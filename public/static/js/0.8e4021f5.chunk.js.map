{"version":3,"sources":["../node_modules/codemirror/mode/javascript/javascript.js"],"names":["CodeMirror","defineMode","config","parserConfig","type","content","indentUnit","statementIndent","jsonldMode","jsonld","jsonMode","json","isTS","typescript","wordRE","wordCharacters","keywords","kw","style","A","B","C","D","operator","atom","isOperatorChar","isJsonldKeyword","ret","tp","cont","tokenBase","stream","state","quote","ch","next","tokenize","escaped","peek","match","test","eat","tokenComment","skipToEnd","expressionAllowed","inSet","readRegexp","current","tokenQuasi","eatWhile","string","slice","start","lexical","word","lastType","propertyIsEnumerable","maybeEnd","findFatArrow","fatArrowAt","arrow","indexOf","m","exec","index","depth","sawSomething","pos","charAt","bracket","atomicTypes","JSLexical","indented","column","align","prev","info","this","inScope","varname","v","localVars","name","cx","context","vars","marked","cc","pass","i","arguments","length","push","apply","inList","list","register","block","newContext","registerVarScoped","inner","Context","Var","globalVars","isModifier","defaultVars","pushcontext","pushblockcontext","popcontext","pushlex","result","indent","outer","lex","poplex","expect","wanted","exp","statement","value","vardef","parenExpr","maybeexpression","pop","maybeelse","functiondef","forspec","className","enumdef","typename","typeexpr","pattern","expression","maybelabel","maybeCatchBinding","afterExport","afterImport","funarg","expressionInner","expressionNoComma","noComma","body","arrowBodyNoComma","arrowBody","commasep","maybeop","maybeoperatorNoComma","maybeoperatorComma","hasOwnProperty","classExpression","arrayLiteral","contCommasep","objprop","quasi","targetNoComma","target","maybeTypeArgs","maybeTarget","me","expr","property","backUp","continueQuasi","_","getterSetter","afterprop","maybetype","what","end","sep","proceed","maybetypeOrIn","mayberettype","isKW","afterType","typeprop","typearg","maybeReturnType","functiondecl","typeparam","maybeTypeDefault","maybeAssign","vardefCont","eltpattern","proppattern","_type","forspec1","forspec2","classNameAfter","classBody","classfield","maybeFrom","exportField","importSpec","maybeMoreImports","maybeAs","enummember","startState","basecolumn","token","sol","indentation","eatSpace","parseJS","textAfter","Pass","top","firstChar","c","closing","isContinuedStatement","doubleIndentSwitch","electricInput","blockCommentStart","blockCommentEnd","blockCommentContinue","lineComment","fold","closeBrackets","helperType","skipExpression","registerHelper","defineMIME","mod","require"],"mappings":"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","file":"static/js/0.8e4021f5.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"javascript\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit;\n  var statementIndent = parserConfig.statementIndent;\n  var jsonldMode = parserConfig.jsonld;\n  var jsonMode = parserConfig.json || jsonldMode;\n  var isTS = parserConfig.typescript;\n  var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/;\n\n  // Tokenizer\n\n  var keywords = function(){\n    function kw(type) {return {type: type, style: \"keyword\"};}\n    var A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\"), D = kw(\"keyword d\");\n    var operator = kw(\"operator\"), atom = {type: \"atom\", style: \"atom\"};\n\n    return {\n      \"if\": kw(\"if\"), \"while\": A, \"with\": A, \"else\": B, \"do\": B, \"try\": B, \"finally\": B,\n      \"return\": D, \"break\": D, \"continue\": D, \"new\": kw(\"new\"), \"delete\": C, \"void\": C, \"throw\": C,\n      \"debugger\": kw(\"debugger\"), \"var\": kw(\"var\"), \"const\": kw(\"var\"), \"let\": kw(\"var\"),\n      \"function\": kw(\"function\"), \"catch\": kw(\"catch\"),\n      \"for\": kw(\"for\"), \"switch\": kw(\"switch\"), \"case\": kw(\"case\"), \"default\": kw(\"default\"),\n      \"in\": operator, \"typeof\": operator, \"instanceof\": operator,\n      \"true\": atom, \"false\": atom, \"null\": atom, \"undefined\": atom, \"NaN\": atom, \"Infinity\": atom,\n      \"this\": kw(\"this\"), \"class\": kw(\"class\"), \"super\": kw(\"atom\"),\n      \"yield\": C, \"export\": kw(\"export\"), \"import\": kw(\"import\"), \"extends\": C,\n      \"await\": C\n    };\n  }();\n\n  var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n  function readRegexp(stream) {\n    var escaped = false, next, inSet = false;\n    while ((next = stream.next()) != null) {\n      if (!escaped) {\n        if (next == \"/\" && !inSet) return;\n        if (next == \"[\") inSet = true;\n        else if (inSet && next == \"]\") inSet = false;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n  }\n\n  // Used as scratch variables to communicate multiple values without\n  // consing up tons of objects.\n  var type, content;\n  function ret(tp, style, cont) {\n    type = tp; content = cont;\n    return style;\n  }\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\n      return ret(\"number\", \"number\");\n    } else if (ch == \".\" && stream.match(\"..\")) {\n      return ret(\"spread\", \"meta\");\n    } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return ret(ch);\n    } else if (ch == \"=\" && stream.eat(\">\")) {\n      return ret(\"=>\", \"operator\");\n    } else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\n      return ret(\"number\", \"number\");\n    } else if (/\\d/.test(ch)) {\n      stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n      return ret(\"number\", \"number\");\n    } else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (expressionAllowed(stream, state, 1)) {\n        readRegexp(stream);\n        stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n        return ret(\"regexp\", \"string-2\");\n      } else {\n        stream.eat(\"=\");\n        return ret(\"operator\", \"operator\", stream.current());\n      }\n    } else if (ch == \"`\") {\n      state.tokenize = tokenQuasi;\n      return tokenQuasi(stream, state);\n    } else if (ch == \"#\" && stream.peek() == \"!\") {\n      stream.skipToEnd();\n      return ret(\"meta\", \"meta\");\n    } else if (ch == \"#\" && stream.eatWhile(wordRE)) {\n      return ret(\"variable\", \"property\")\n    } else if (ch == \"<\" && stream.match(\"!--\") ||\n               (ch == \"-\" && stream.match(\"->\") && !/\\S/.test(stream.string.slice(0, stream.start)))) {\n      stream.skipToEnd()\n      return ret(\"comment\", \"comment\")\n    } else if (isOperatorChar.test(ch)) {\n      if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n        if (stream.eat(\"=\")) {\n          if (ch == \"!\" || ch == \"=\") stream.eat(\"=\")\n        } else if (/[<>*+\\-]/.test(ch)) {\n          stream.eat(ch)\n          if (ch == \">\") stream.eat(ch)\n        }\n      }\n      if (ch == \"?\" && stream.eat(\".\")) return ret(\".\")\n      return ret(\"operator\", \"operator\", stream.current());\n    } else if (wordRE.test(ch)) {\n      stream.eatWhile(wordRE);\n      var word = stream.current()\n      if (state.lastType != \".\") {\n        if (keywords.propertyIsEnumerable(word)) {\n          var kw = keywords[word]\n          return ret(kw.type, kw.style, word)\n        }\n        if (word == \"async\" && stream.match(/^(\\s|\\/\\*.*?\\*\\/)*[\\[\\(\\w]/, false))\n          return ret(\"async\", \"keyword\", word)\n      }\n      return ret(\"variable\", \"variable\", word)\n    }\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next;\n      if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)){\n        state.tokenize = tokenBase;\n        return ret(\"jsonld-keyword\", \"meta\");\n      }\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (!escaped) state.tokenize = tokenBase;\n      return ret(\"string\", \"string\");\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return ret(\"comment\", \"comment\");\n  }\n\n  function tokenQuasi(stream, state) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    return ret(\"quasi\", \"string-2\", stream.current());\n  }\n\n  var brackets = \"([{}])\";\n  // This is a crude lookahead trick to try and notice that we're\n  // parsing the argument patterns for a fat-arrow function before we\n  // actually hit the arrow token. It only works if the arrow is on\n  // the same line as the arguments and there's no strange noise\n  // (comments) in between. Fallback is to only notice when we hit the\n  // arrow, and not declare the arguments as locals for the arrow\n  // body.\n  function findFatArrow(stream, state) {\n    if (state.fatArrowAt) state.fatArrowAt = null;\n    var arrow = stream.string.indexOf(\"=>\", stream.start);\n    if (arrow < 0) return;\n\n    if (isTS) { // Try to skip TypeScript return type declarations after the arguments\n      var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow))\n      if (m) arrow = m.index\n    }\n\n    var depth = 0, sawSomething = false;\n    for (var pos = arrow - 1; pos >= 0; --pos) {\n      var ch = stream.string.charAt(pos);\n      var bracket = brackets.indexOf(ch);\n      if (bracket >= 0 && bracket < 3) {\n        if (!depth) { ++pos; break; }\n        if (--depth == 0) { if (ch == \"(\") sawSomething = true; break; }\n      } else if (bracket >= 3 && bracket < 6) {\n        ++depth;\n      } else if (wordRE.test(ch)) {\n        sawSomething = true;\n      } else if (/[\"'\\/`]/.test(ch)) {\n        for (;; --pos) {\n          if (pos == 0) return\n          var next = stream.string.charAt(pos - 1)\n          if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") { pos--; break }\n        }\n      } else if (sawSomething && !depth) {\n        ++pos;\n        break;\n      }\n    }\n    if (sawSomething && !depth) state.fatArrowAt = pos;\n  }\n\n  // Parser\n\n  var atomicTypes = {\"atom\": true, \"number\": true, \"variable\": true, \"string\": true, \"regexp\": true, \"this\": true, \"jsonld-keyword\": true};\n\n  function JSLexical(indented, column, type, align, prev, info) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.prev = prev;\n    this.info = info;\n    if (align != null) this.align = align;\n  }\n\n  function inScope(state, varname) {\n    for (var v = state.localVars; v; v = v.next)\n      if (v.name == varname) return true;\n    for (var cx = state.context; cx; cx = cx.prev) {\n      for (var v = cx.vars; v; v = v.next)\n        if (v.name == varname) return true;\n    }\n  }\n\n  function parseJS(state, style, type, content, stream) {\n    var cc = state.cc;\n    // Communicate our context to the combinators.\n    // (Less wasteful than consing up a hundred closures on every call.)\n    cx.state = state; cx.stream = stream; cx.marked = null, cx.cc = cc; cx.style = style;\n\n    if (!state.lexical.hasOwnProperty(\"align\"))\n      state.lexical.align = true;\n\n    while(true) {\n      var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n      if (combinator(type, content)) {\n        while(cc.length && cc[cc.length - 1].lex)\n          cc.pop()();\n        if (cx.marked) return cx.marked;\n        if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\n        return style;\n      }\n    }\n  }\n\n  // Combinator utils\n\n  var cx = {state: null, column: null, marked: null, cc: null};\n  function pass() {\n    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\n  }\n  function cont() {\n    pass.apply(null, arguments);\n    return true;\n  }\n  function inList(name, list) {\n    for (var v = list; v; v = v.next) if (v.name == name) return true\n    return false;\n  }\n  function register(varname) {\n    var state = cx.state;\n    cx.marked = \"def\";\n    if (state.context) {\n      if (state.lexical.info == \"var\" && state.context && state.context.block) {\n        // FIXME function decls are also not block scoped\n        var newContext = registerVarScoped(varname, state.context)\n        if (newContext != null) {\n          state.context = newContext\n          return\n        }\n      } else if (!inList(varname, state.localVars)) {\n        state.localVars = new Var(varname, state.localVars)\n        return\n      }\n    }\n    // Fall through means this is global\n    if (parserConfig.globalVars && !inList(varname, state.globalVars))\n      state.globalVars = new Var(varname, state.globalVars)\n  }\n  function registerVarScoped(varname, context) {\n    if (!context) {\n      return null\n    } else if (context.block) {\n      var inner = registerVarScoped(varname, context.prev)\n      if (!inner) return null\n      if (inner == context.prev) return context\n      return new Context(inner, context.vars, true)\n    } else if (inList(varname, context.vars)) {\n      return context\n    } else {\n      return new Context(context.prev, new Var(varname, context.vars), false)\n    }\n  }\n\n  function isModifier(name) {\n    return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\"\n  }\n\n  // Combinators\n\n  function Context(prev, vars, block) { this.prev = prev; this.vars = vars; this.block = block }\n  function Var(name, next) { this.name = name; this.next = next }\n\n  var defaultVars = new Var(\"this\", new Var(\"arguments\", null))\n  function pushcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, false)\n    cx.state.localVars = defaultVars\n  }\n  function pushblockcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, true)\n    cx.state.localVars = null\n  }\n  function popcontext() {\n    cx.state.localVars = cx.state.context.vars\n    cx.state.context = cx.state.context.prev\n  }\n  popcontext.lex = true\n  function pushlex(type, info) {\n    var result = function() {\n      var state = cx.state, indent = state.indented;\n      if (state.lexical.type == \"stat\") indent = state.lexical.indented;\n      else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev)\n        indent = outer.indented;\n      state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n    };\n    result.lex = true;\n    return result;\n  }\n  function poplex() {\n    var state = cx.state;\n    if (state.lexical.prev) {\n      if (state.lexical.type == \")\")\n        state.indented = state.lexical.indented;\n      state.lexical = state.lexical.prev;\n    }\n  }\n  poplex.lex = true;\n\n  function expect(wanted) {\n    function exp(type) {\n      if (type == wanted) return cont();\n      else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();\n      else return cont(exp);\n    };\n    return exp;\n  }\n\n  function statement(type, value) {\n    if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n    if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n    if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n    if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n    if (type == \"debugger\") return cont(expect(\";\"));\n    if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n    if (type == \";\") return cont();\n    if (type == \"if\") {\n      if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex)\n        cx.state.cc.pop()();\n      return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n    }\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"for\") return cont(pushlex(\"form\"), forspec, statement, poplex);\n    if (type == \"class\" || (isTS && value == \"interface\")) {\n      cx.marked = \"keyword\"\n      return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex)\n    }\n    if (type == \"variable\") {\n      if (isTS && value == \"declare\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n        cx.marked = \"keyword\"\n        if (value == \"enum\") return cont(enumdef);\n        else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));\n        else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex)\n      } else if (isTS && value == \"namespace\") {\n        cx.marked = \"keyword\"\n        return cont(pushlex(\"form\"), expression, statement, poplex)\n      } else if (isTS && value == \"abstract\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else {\n        return cont(pushlex(\"stat\"), maybelabel);\n      }\n    }\n    if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext,\n                                      block, poplex, poplex, popcontext);\n    if (type == \"case\") return cont(expression, expect(\":\"));\n    if (type == \"default\") return cont(expect(\":\"));\n    if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n    if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n    if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n    if (type == \"async\") return cont(statement)\n    if (value == \"@\") return cont(expression, statement)\n    return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n  }\n  function maybeCatchBinding(type) {\n    if (type == \"(\") return cont(funarg, expect(\")\"))\n  }\n  function expression(type, value) {\n    return expressionInner(type, value, false);\n  }\n  function expressionNoComma(type, value) {\n    return expressionInner(type, value, true);\n  }\n  function parenExpr(type) {\n    if (type != \"(\") return pass()\n    return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex)\n  }\n  function expressionInner(type, value, noComma) {\n    if (cx.state.fatArrowAt == cx.stream.start) {\n      var body = noComma ? arrowBodyNoComma : arrowBody;\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);\n      else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n    }\n\n    var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n    if (type == \"function\") return cont(functiondef, maybeop);\n    if (type == \"class\" || (isTS && value == \"interface\")) { cx.marked = \"keyword\"; return cont(pushlex(\"form\"), classExpression, poplex); }\n    if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n    if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n    if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n    if (type == \"quasi\") return pass(quasi, maybeop);\n    if (type == \"new\") return cont(maybeTarget(noComma));\n    if (type == \"import\") return cont(expression);\n    return cont();\n  }\n  function maybeexpression(type) {\n    if (type.match(/[;\\}\\)\\],]/)) return pass();\n    return pass(expression);\n  }\n\n  function maybeoperatorComma(type, value) {\n    if (type == \",\") return cont(maybeexpression);\n    return maybeoperatorNoComma(type, value, false);\n  }\n  function maybeoperatorNoComma(type, value, noComma) {\n    var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n    var expr = noComma == false ? expression : expressionNoComma;\n    if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n    if (type == \"operator\") {\n      if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n      if (isTS && value == \"<\" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/, false))\n        return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n      if (value == \"?\") return cont(expression, expect(\":\"), expr);\n      return cont(expr);\n    }\n    if (type == \"quasi\") { return pass(quasi, me); }\n    if (type == \";\") return;\n    if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n    if (type == \".\") return cont(property, me);\n    if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n    if (isTS && value == \"as\") { cx.marked = \"keyword\"; return cont(typeexpr, me) }\n    if (type == \"regexp\") {\n      cx.state.lastType = cx.marked = \"operator\"\n      cx.stream.backUp(cx.stream.pos - cx.stream.start - 1)\n      return cont(expr)\n    }\n  }\n  function quasi(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n    return cont(expression, continueQuasi);\n  }\n  function continueQuasi(type) {\n    if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasi);\n    }\n  }\n  function arrowBody(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expression);\n  }\n  function arrowBodyNoComma(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expressionNoComma);\n  }\n  function maybeTarget(noComma) {\n    return function(type) {\n      if (type == \".\") return cont(noComma ? targetNoComma : target);\n      else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma)\n      else return pass(noComma ? expressionNoComma : expression);\n    };\n  }\n  function target(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorComma); }\n  }\n  function targetNoComma(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorNoComma); }\n  }\n  function maybelabel(type) {\n    if (type == \":\") return cont(poplex, statement);\n    return pass(maybeoperatorComma, expect(\";\"), poplex);\n  }\n  function property(type) {\n    if (type == \"variable\") {cx.marked = \"property\"; return cont();}\n  }\n  function objprop(type, value) {\n    if (type == \"async\") {\n      cx.marked = \"property\";\n      return cont(objprop);\n    } else if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      if (value == \"get\" || value == \"set\") return cont(getterSetter);\n      var m // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n      if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false)))\n        cx.state.fatArrowAt = cx.stream.pos + m[0].length\n      return cont(afterprop);\n    } else if (type == \"number\" || type == \"string\") {\n      cx.marked = jsonldMode ? \"property\" : (cx.style + \" property\");\n      return cont(afterprop);\n    } else if (type == \"jsonld-keyword\") {\n      return cont(afterprop);\n    } else if (isTS && isModifier(value)) {\n      cx.marked = \"keyword\"\n      return cont(objprop)\n    } else if (type == \"[\") {\n      return cont(expression, maybetype, expect(\"]\"), afterprop);\n    } else if (type == \"spread\") {\n      return cont(expressionNoComma, afterprop);\n    } else if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(objprop);\n    } else if (type == \":\") {\n      return pass(afterprop)\n    }\n  }\n  function getterSetter(type) {\n    if (type != \"variable\") return pass(afterprop);\n    cx.marked = \"property\";\n    return cont(functiondef);\n  }\n  function afterprop(type) {\n    if (type == \":\") return cont(expressionNoComma);\n    if (type == \"(\") return pass(functiondef);\n  }\n  function commasep(what, end, sep) {\n    function proceed(type, value) {\n      if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n        var lex = cx.state.lexical;\n        if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n        return cont(function(type, value) {\n          if (type == end || value == end) return pass()\n          return pass(what)\n        }, proceed);\n      }\n      if (type == end || value == end) return cont();\n      if (sep && sep.indexOf(\";\") > -1) return pass(what)\n      return cont(expect(end));\n    }\n    return function(type, value) {\n      if (type == end || value == end) return cont();\n      return pass(what, proceed);\n    };\n  }\n  function contCommasep(what, end, info) {\n    for (var i = 3; i < arguments.length; i++)\n      cx.cc.push(arguments[i]);\n    return cont(pushlex(end, info), commasep(what, end), poplex);\n  }\n  function block(type) {\n    if (type == \"}\") return cont();\n    return pass(statement, block);\n  }\n  function maybetype(type, value) {\n    if (isTS) {\n      if (type == \":\") return cont(typeexpr);\n      if (value == \"?\") return cont(maybetype);\n    }\n  }\n  function maybetypeOrIn(type, value) {\n    if (isTS && (type == \":\" || value == \"in\")) return cont(typeexpr)\n  }\n  function mayberettype(type) {\n    if (isTS && type == \":\") {\n      if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr)\n      else return cont(typeexpr)\n    }\n  }\n  function isKW(_, value) {\n    if (value == \"is\") {\n      cx.marked = \"keyword\"\n      return cont()\n    }\n  }\n  function typeexpr(type, value) {\n    if (value == \"keyof\" || value == \"typeof\" || value == \"infer\") {\n      cx.marked = \"keyword\"\n      return cont(value == \"typeof\" ? expressionNoComma : typeexpr)\n    }\n    if (type == \"variable\" || value == \"void\") {\n      cx.marked = \"type\"\n      return cont(afterType)\n    }\n    if (value == \"|\" || value == \"&\") return cont(typeexpr)\n    if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n    if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType)\n    if (type == \"{\") return cont(pushlex(\"}\"), commasep(typeprop, \"}\", \",;\"), poplex, afterType)\n    if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType)\n    if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr)\n  }\n  function maybeReturnType(type) {\n    if (type == \"=>\") return cont(typeexpr)\n  }\n  function typeprop(type, value) {\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\"\n      return cont(typeprop)\n    } else if (value == \"?\" || type == \"number\" || type == \"string\") {\n      return cont(typeprop)\n    } else if (type == \":\") {\n      return cont(typeexpr)\n    } else if (type == \"[\") {\n      return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop)\n    } else if (type == \"(\") {\n      return pass(functiondecl, typeprop)\n    }\n  }\n  function typearg(type, value) {\n    if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg)\n    if (type == \":\") return cont(typeexpr)\n    if (type == \"spread\") return cont(typearg)\n    return pass(typeexpr)\n  }\n  function afterType(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n    if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr)\n    if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType)\n    if (value == \"extends\" || value == \"implements\") { cx.marked = \"keyword\"; return cont(typeexpr) }\n    if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr)\n  }\n  function maybeTypeArgs(_, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n  }\n  function typeparam() {\n    return pass(typeexpr, maybeTypeDefault)\n  }\n  function maybeTypeDefault(_, value) {\n    if (value == \"=\") return cont(typeexpr)\n  }\n  function vardef(_, value) {\n    if (value == \"enum\") {cx.marked = \"keyword\"; return cont(enumdef)}\n    return pass(pattern, maybetype, maybeAssign, vardefCont);\n  }\n  function pattern(type, value) {\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(pattern) }\n    if (type == \"variable\") { register(value); return cont(); }\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"[\") return contCommasep(eltpattern, \"]\");\n    if (type == \"{\") return contCommasep(proppattern, \"}\");\n  }\n  function proppattern(type, value) {\n    if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n      register(value);\n      return cont(maybeAssign);\n    }\n    if (type == \"variable\") cx.marked = \"property\";\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"}\") return pass();\n    if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n    return cont(expect(\":\"), pattern, maybeAssign);\n  }\n  function eltpattern() {\n    return pass(pattern, maybeAssign)\n  }\n  function maybeAssign(_type, value) {\n    if (value == \"=\") return cont(expressionNoComma);\n  }\n  function vardefCont(type) {\n    if (type == \",\") return cont(vardef);\n  }\n  function maybeelse(type, value) {\n    if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n  }\n  function forspec(type, value) {\n    if (value == \"await\") return cont(forspec);\n    if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n  }\n  function forspec1(type) {\n    if (type == \"var\") return cont(vardef, forspec2);\n    if (type == \"variable\") return cont(forspec2);\n    return pass(forspec2)\n  }\n  function forspec2(type, value) {\n    if (type == \")\") return cont()\n    if (type == \";\") return cont(forspec2)\n    if (value == \"in\" || value == \"of\") { cx.marked = \"keyword\"; return cont(expression, forspec2) }\n    return pass(expression, forspec2)\n  }\n  function functiondef(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondef);}\n    if (type == \"variable\") {register(value); return cont(functiondef);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef)\n  }\n  function functiondecl(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondecl);}\n    if (type == \"variable\") {register(value); return cont(functiondecl);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl)\n  }\n  function typename(type, value) {\n    if (type == \"keyword\" || type == \"variable\") {\n      cx.marked = \"type\"\n      return cont(typename)\n    } else if (value == \"<\") {\n      return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex)\n    }\n  }\n  function funarg(type, value) {\n    if (value == \"@\") cont(expression, funarg)\n    if (type == \"spread\") return cont(funarg);\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(funarg); }\n    if (isTS && type == \"this\") return cont(maybetype, maybeAssign)\n    return pass(pattern, maybetype, maybeAssign);\n  }\n  function classExpression(type, value) {\n    // Class expressions may have an optional name.\n    if (type == \"variable\") return className(type, value);\n    return classNameAfter(type, value);\n  }\n  function className(type, value) {\n    if (type == \"variable\") {register(value); return cont(classNameAfter);}\n  }\n  function classNameAfter(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter)\n    if (value == \"extends\" || value == \"implements\" || (isTS && type == \",\")) {\n      if (value == \"implements\") cx.marked = \"keyword\";\n      return cont(isTS ? typeexpr : expression, classNameAfter);\n    }\n    if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n  }\n  function classBody(type, value) {\n    if (type == \"async\" ||\n        (type == \"variable\" &&\n         (value == \"static\" || value == \"get\" || value == \"set\" || (isTS && isModifier(value))) &&\n         cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false))) {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      return cont(classfield, classBody);\n    }\n    if (type == \"number\" || type == \"string\") return cont(classfield, classBody);\n    if (type == \"[\")\n      return cont(expression, maybetype, expect(\"]\"), classfield, classBody)\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (isTS && type == \"(\") return pass(functiondecl, classBody)\n    if (type == \";\" || type == \",\") return cont(classBody);\n    if (type == \"}\") return cont();\n    if (value == \"@\") return cont(expression, classBody)\n  }\n  function classfield(type, value) {\n    if (value == \"?\") return cont(classfield)\n    if (type == \":\") return cont(typeexpr, maybeAssign)\n    if (value == \"=\") return cont(expressionNoComma)\n    var context = cx.state.lexical.prev, isInterface = context && context.info == \"interface\"\n    return pass(isInterface ? functiondecl : functiondef)\n  }\n  function afterExport(type, value) {\n    if (value == \"*\") { cx.marked = \"keyword\"; return cont(maybeFrom, expect(\";\")); }\n    if (value == \"default\") { cx.marked = \"keyword\"; return cont(expression, expect(\";\")); }\n    if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n    return pass(statement);\n  }\n  function exportField(type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(expect(\"variable\")); }\n    if (type == \"variable\") return pass(expressionNoComma, exportField);\n  }\n  function afterImport(type) {\n    if (type == \"string\") return cont();\n    if (type == \"(\") return pass(expression);\n    return pass(importSpec, maybeMoreImports, maybeFrom);\n  }\n  function importSpec(type, value) {\n    if (type == \"{\") return contCommasep(importSpec, \"}\");\n    if (type == \"variable\") register(value);\n    if (value == \"*\") cx.marked = \"keyword\";\n    return cont(maybeAs);\n  }\n  function maybeMoreImports(type) {\n    if (type == \",\") return cont(importSpec, maybeMoreImports)\n  }\n  function maybeAs(_type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(importSpec); }\n  }\n  function maybeFrom(_type, value) {\n    if (value == \"from\") { cx.marked = \"keyword\"; return cont(expression); }\n  }\n  function arrayLiteral(type) {\n    if (type == \"]\") return cont();\n    return pass(commasep(expressionNoComma, \"]\"));\n  }\n  function enumdef() {\n    return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex)\n  }\n  function enummember() {\n    return pass(pattern, maybeAssign);\n  }\n\n  function isContinuedStatement(state, textAfter) {\n    return state.lastType == \"operator\" || state.lastType == \",\" ||\n      isOperatorChar.test(textAfter.charAt(0)) ||\n      /[,.]/.test(textAfter.charAt(0));\n  }\n\n  function expressionAllowed(stream, state, backUp) {\n    return state.tokenize == tokenBase &&\n      /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) ||\n      (state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0))))\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      var state = {\n        tokenize: tokenBase,\n        lastType: \"sof\",\n        cc: [],\n        lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\n        localVars: parserConfig.localVars,\n        context: parserConfig.localVars && new Context(null, null, false),\n        indented: basecolumn || 0\n      };\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\")\n        state.globalVars = parserConfig.globalVars;\n      return state;\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (!state.lexical.hasOwnProperty(\"align\"))\n          state.lexical.align = false;\n        state.indented = stream.indentation();\n        findFatArrow(stream, state);\n      }\n      if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (type == \"comment\") return style;\n      state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n      return parseJS(state, style, type, content, stream);\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize == tokenComment) return CodeMirror.Pass;\n      if (state.tokenize != tokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top\n      // Kludge to prevent 'maybelse' from blocking lexical scope pops\n      if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n        var c = state.cc[i];\n        if (c == poplex) lexical = lexical.prev;\n        else if (c != maybeelse) break;\n      }\n      while ((lexical.type == \"stat\" || lexical.type == \"form\") &&\n             (firstChar == \"}\" || ((top = state.cc[state.cc.length - 1]) &&\n                                   (top == maybeoperatorComma || top == maybeoperatorNoComma) &&\n                                   !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))))\n        lexical = lexical.prev;\n      if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\")\n        lexical = lexical.prev;\n      var type = lexical.type, closing = firstChar == type;\n\n      if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);\n      else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\n      else if (type == \"form\") return lexical.indented + indentUnit;\n      else if (type == \"stat\")\n        return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);\n      else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false)\n        return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);\n      else if (lexical.align) return lexical.column + (closing ? 0 : 1);\n      else return lexical.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n    blockCommentStart: jsonMode ? null : \"/*\",\n    blockCommentEnd: jsonMode ? null : \"*/\",\n    blockCommentContinue: jsonMode ? null : \" * \",\n    lineComment: jsonMode ? null : \"//\",\n    fold: \"brace\",\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n\n    helperType: jsonMode ? \"json\" : \"javascript\",\n    jsonldMode: jsonldMode,\n    jsonMode: jsonMode,\n\n    expressionAllowed: expressionAllowed,\n\n    skipExpression: function(state) {\n      var top = state.cc[state.cc.length - 1]\n      if (top == expression || top == expressionNoComma) state.cc.pop()\n    }\n  };\n});\n\nCodeMirror.registerHelper(\"wordChars\", \"javascript\", /[\\w$]/);\n\nCodeMirror.defineMIME(\"text/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"text/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/x-javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/json\", {name: \"javascript\", json: true});\nCodeMirror.defineMIME(\"application/x-json\", {name: \"javascript\", json: true});\nCodeMirror.defineMIME(\"application/ld+json\", {name: \"javascript\", jsonld: true});\nCodeMirror.defineMIME(\"text/typescript\", { name: \"javascript\", typescript: true });\nCodeMirror.defineMIME(\"application/typescript\", { name: \"javascript\", typescript: true });\n\n});\n"],"sourceRoot":""}