{"version":3,"sources":["components/AceEditorJS.js","components/AceEditorGraphql.js","App.js","serviceWorker.js","index.js"],"names":["User_QUERY","gql","USERFORM_QUERY","AceEditorJS","props","onChange","newValue","setState","codeJS","prettify","format","state","play","userdata","userformdata","codeGraphql","includes","console","log","name","user","email","time_zone","account_type","status","loginToGetSubmissions","pdf_designer_group","historyArray","push","JSON","stringify","helper","value","copied","userForm","Button","animated","onClick","this","Content","hidden","visible","Icon","Modal","trigger","style","height","top","left","bottom","right","Header","Description","map","history","text","mode","theme","position","width","enableSnippets","enableLiveAutocompletion","enableBasicAutocompletion","highlightActiveLine","editorProps","$blockScrolling","setOptions","wrapBehavioursEnabled","query","loading","error","data","Fragment","Popup","content","header","Image","src","avatar","React","Component","AceEditorGraphql","client","ApolloClient","uri","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c5d5ce6c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport AceEditor from \"react-ace\";\r\nimport { format } from \"graphql-formatter\";\r\nimport \"ace-builds/src-noconflict/mode-graphqlschema\";\r\nimport \"ace-builds/src-noconflict/mode-javascript\";\r\nimport \"ace-builds/src-noconflict/theme-dracula\";\r\nimport \"ace-builds/src-noconflict/ext-language_tools\";\r\nimport { Button, Icon, Popup, Image, Modal } from \"semantic-ui-react\";\r\nimport gql from \"graphql-tag\";\r\nimport { Query } from \"react-apollo\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\n\r\nconst User_QUERY = gql`\r\n    query UserQuery {\r\n        user {\r\n            name\r\n            email\r\n            time_zone\r\n            account_type\r\n            status\r\n            loginToGetSubmissions\r\n            pdf_designer_group\r\n        }\r\n    }\r\n`;\r\nconst USERFORM_QUERY = gql`\r\n    query {\r\n        userForm(apiKey: \"e8d6edf1b4b67670c947ede51ba14398\") {\r\n            id\r\n            username\r\n            type\r\n            last_submission\r\n            status\r\n            height\r\n            count\r\n        }\r\n    }\r\n`;\r\n\r\nclass AceEditorJS extends React.Component {\r\n    constructor(props) {\r\n        const value = false;\r\n        super(props);\r\n        this.state = {\r\n            codeJS: \"\",\r\n            helper: \"{ user { name} } \",\r\n            value: \"\",\r\n            copied: false,\r\n        };\r\n        this.user = {\r\n            name: \"\",\r\n            email: \"\",\r\n            time_zone: \"\",\r\n            account_type: \"\",\r\n            status: \"\",\r\n            loginToGetSubmissions: \"\",\r\n            pdf_designer_group: \"\",\r\n        };\r\n        this.userForm = [];\r\n        this.userdata = {};\r\n        this.userformdata = [];\r\n        this.historyArray = [];\r\n    }\r\n    onChange = (newValue) => {\r\n        this.setState({\r\n            codeJS: newValue,\r\n        });\r\n    };\r\n    prettify = () => {\r\n        this.setState({\r\n            codeJS: format(this.state.codeJS),\r\n        });\r\n    };\r\n    play = () => {\r\n        this.userdata = {};\r\n        this.userformdata = {};\r\n        // if (this.props.codeGraphql.includes(\"userForm\")) {\r\n        //     console.log(\"ı am in userform\");\r\n        //     console.log(\r\n        //         JSON.stringify(this.userForm.map((val) => val.username))\r\n        //     );\r\n        //     this.onChange(JSON.stringify(this.userForm.username));\r\n        // }\r\n        if (this.props.codeGraphql.includes(\"user\")) {\r\n            console.log(\"ı am in user\");\r\n            if (this.props.codeGraphql.includes(\"name\")) {\r\n                this.userdata.name = this.user.name;\r\n            }\r\n            if (this.props.codeGraphql.includes(\"email\")) {\r\n                this.userdata.email = this.user.email;\r\n            }\r\n            if (this.props.codeGraphql.includes(\"time_zone\")) {\r\n                this.userdata.time_zone = this.user.time_zone;\r\n            }\r\n            if (this.props.codeGraphql.includes(\"account_type\")) {\r\n                this.userdata.account_type = this.user.account_type;\r\n            }\r\n            if (this.props.codeGraphql.includes(\"status\")) {\r\n                this.userdata.status = this.user.status;\r\n            }\r\n            if (this.props.codeGraphql.includes(\"loginToGetSubmissions\")) {\r\n                this.userdata.loginToGetSubmissions = this.user.loginToGetSubmissions;\r\n            }\r\n            if (this.props.codeGraphql.includes(\"pdf_designer_group\")) {\r\n                this.userdata.pdf_designer_group = this.user.pdf_designer_group;\r\n            }\r\n        }\r\n        this.historyArray.push(this.props.codeGraphql + \" \\n\");\r\n        console.log(this.codeJS);\r\n        this.onChange(\"\");\r\n        this.onChange(JSON.stringify(this.userdata));\r\n    };\r\n    render() {\r\n        return (\r\n            <>\r\n                <Button animated=\"vertical\" onClick={this.play}>\r\n                    <Button.Content hidden>Run</Button.Content>\r\n                    <Button.Content visible>\r\n                        <Icon name=\"play circle outline\" />\r\n                    </Button.Content>\r\n                </Button>\r\n                <Modal\r\n                    trigger={\r\n                        <Button animated=\"vertical\">\r\n                            <Button.Content hidden>History</Button.Content>\r\n                            <Button.Content visible>\r\n                                <Icon name=\"history\" />\r\n                            </Button.Content>\r\n                        </Button>\r\n                    }\r\n                    style={{\r\n                        height: \"auto\",\r\n                        top: \"auto\",\r\n                        left: \"auto\",\r\n                        bottom: \"auto\",\r\n                        right: \"auto\",\r\n                    }}\r\n                >\r\n                    <Modal.Header>History of Query</Modal.Header>\r\n                    <Modal.Content>\r\n                        <Modal.Description>\r\n                            {this.historyArray.map((history) => (\r\n                                <h2>\r\n                                    {\" \"}\r\n                                    {history}\r\n                                    <CopyToClipboard text={history}>\r\n                                        <Button animated=\"vertical\">\r\n                                            <Button.Content hidden>\r\n                                                Copy\r\n                                            </Button.Content>\r\n                                            <Button.Content visible>\r\n                                                <Icon name=\"copy\" />\r\n                                            </Button.Content>\r\n                                        </Button>\r\n                                    </CopyToClipboard>\r\n                                    <br></br>\r\n                                </h2>\r\n                            ))}\r\n                        </Modal.Description>\r\n                    </Modal.Content>\r\n                </Modal>\r\n\r\n                <AceEditor\r\n                    mode=\"javascript\"\r\n                    theme=\"dracula\"\r\n                    style={{\r\n                        position: \"absolute\",\r\n                        right: \"40px\",\r\n                        width: \"700px\",\r\n                    }}\r\n                    value={this.state.codeJS}\r\n                    onChange={this.onChange}\r\n                    name=\"UNIQUE_ID_OF_DIV\"\r\n                    enableSnippets={true}\r\n                    enableLiveAutocompletion={true}\r\n                    enableBasicAutocompletion={true}\r\n                    highlightActiveLine={true}\r\n                    editorProps={{ $blockScrolling: true }}\r\n                    setOptions={{\r\n                        enableBasicAutocompletion: true,\r\n                        enableLiveAutocompletion: true,\r\n                        enableSnippets: true,\r\n                        wrapBehavioursEnabled: true,\r\n                    }}\r\n                />\r\n                <Query query={User_QUERY}>\r\n                    {({ loading, error, data }) => {\r\n                        if (loading) return <h4> Loading ...</h4>;\r\n                        if (error) console.log(error);\r\n                        //console.log(data);\r\n                        this.user.name = data.user.name;\r\n                        this.user.email = data.user.email;\r\n                        this.user.time_zone = data.user.time_zone;\r\n                        this.user.account_type = data.user.account_type;\r\n                        this.user.status = data.user.status;\r\n                        this.user.loginToGetSubmissions =\r\n                            data.user.loginToGetSubmissions;\r\n                        this.user.pdf_designer_group =\r\n                            data.user.loginToGetSubmissions;\r\n                        return <div></div>;\r\n                    }}\r\n                </Query>\r\n                <Query query={USERFORM_QUERY}>\r\n                    {({ loading, error, data }) => {\r\n                        if (loading) return <h4> Loading ...</h4>;\r\n                        if (error) console.log(error);\r\n                        this.userForm = data.userForm;\r\n                        return <div></div>;\r\n                    }}\r\n                </Query>\r\n                <React.Fragment>\r\n                    {\r\n                        <Popup\r\n                            content={this.helper}\r\n                            header=\"If you help , you can check https://graphql.org/\"\r\n                            position=\"bottom\"\r\n                            trigger={\r\n                                <Image\r\n                                    src=\"https://semantic-ui.com/images/avatar/small/stevie.jpg\"\r\n                                    avatar\r\n                                />\r\n                            }\r\n                        />\r\n                    }\r\n                </React.Fragment>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AceEditorJS;\r\n","import React from \"react\";\r\nimport AceEditor from \"react-ace\";\r\nimport { format } from \"graphql-formatter\";\r\nimport \"ace-builds/src-noconflict/mode-graphqlschema\";\r\nimport \"ace-builds/src-noconflict/mode-javascript\";\r\nimport \"ace-builds/src-noconflict/theme-dracula\";\r\nimport \"ace-builds/src-noconflict/ext-language_tools\";\r\nimport { Button, Icon } from \"semantic-ui-react\";\r\nimport AceEditorJS from \"./AceEditorJS\";\r\n\r\nclass AceEditorGraphql extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            codeGraphql: \"\",\r\n        };\r\n    }\r\n    onChange = (newValue) => {\r\n        this.setState({\r\n            codeGraphql: newValue,\r\n        });\r\n    };\r\n    prettify = () => {\r\n        this.setState({\r\n            codeGraphql: format(this.state.codeGraphql),\r\n        });\r\n    };\r\n    render() {\r\n        return (\r\n            <>\r\n                <Button animated=\"vertical\" onClick={this.prettify}>\r\n                    <Button.Content hidden>Prettify</Button.Content>\r\n                    <Button.Content visible>\r\n                        <Icon name=\"leaf\" />\r\n                    </Button.Content>\r\n                </Button>\r\n                <AceEditor\r\n                    mode=\"graphqlschema\"\r\n                    theme=\"dracula\"\r\n                    style={{\r\n                        position: \"absolute\",\r\n                        left: \"40px\",\r\n                        width: \"700px\",\r\n                    }}\r\n                    value={this.state.codeGraphql}\r\n                    onChange={this.onChange}\r\n                    name=\"UNIQUE_ID_OF_DIV\"\r\n                    enableSnippets={true}\r\n                    enableLiveAutocompletion={true}\r\n                    enableBasicAutocompletion={true}\r\n                    highlightActiveLine={true}\r\n                    editorProps={{ $blockScrolling: true }}\r\n                    setOptions={{\r\n                        enableBasicAutocompletion: true,\r\n                        enableLiveAutocompletion: true,\r\n                        enableSnippets: true,\r\n                        wrapBehavioursEnabled: true,\r\n                    }}\r\n                />\r\n                <AceEditorJS codeGraphql={this.state.codeGraphql} />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AceEditorGraphql;\r\n","import React, { Component } from \"react\";\r\nimport ApolloClient from \"apollo-boost\";\r\nimport AceEditorGraphql from \"./components/AceEditorGraphql\";\r\nimport { ApolloProvider } from \"react-apollo\";\r\nimport \"./App.css\";\r\nimport \"bootswatch/dist/solar/bootstrap.min.css\";\r\nconst client = new ApolloClient({\r\n    uri: \"/graphql\",\r\n});\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <ApolloProvider client={client}>\r\n                <div className=\"container\">\r\n                    <h1>GraphQL</h1>\r\n                </div>\r\n                <AceEditorGraphql />\r\n            </ApolloProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}