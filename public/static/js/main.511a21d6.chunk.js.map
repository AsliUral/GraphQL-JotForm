{"version":3,"sources":["components/AceEditorGraphql/QueryResult/HistoryModal/HistoryModal.js","components/AceEditorGraphql/QueryResult/AceEditorJS/AceEditorJS.js","components/AceEditorGraphql/QueryResult/PopupIcon/PopupIcon.js","components/AceEditorGraphql/QueryResult/Loader/Loader.js","components/AceEditorGraphql/QueryResult/QueryResult.js","components/AceEditorGraphql/CopyToClickboard/CopyToClipboard.js","components/AceEditorGraphql/AceEditorGraphql.js","components/SideBarDocs/SideBarDocs.js","components/SideBarDocs/SearchQuery/SearchQuery.js","components/SideBarDocs/AccordionQueryList/AccordionQueryList.js","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["HistoryModal","props","Modal","trigger","Button","animated","Content","hidden","visible","Icon","name","style","height","top","left","bottom","right","Header","Description","this","historyArray","map","history","text","React","Component","AceEditorJS","src","codeJS","position","width","theme","connect","state","PopupIcon","Fragment","Popup","content","helper","header","Image","avatar","LoaderAnimation","Segment","Dimmer","active","Loader","QueryResult","play","resultOfPlay","push","codeGraphql","onClick","playButtonClick","query","currentQuery","loading","error","data","console","log","setQueryResult","wrongQuery","Message","Helper","Query","setData","queryText","dispatch","type","value","val","CopyClipBoard","copy","AceEditorGraphql","prettifycodeGraphql","CopyToClipboard","mode","onChange","onChangecodeGraphql","enableSnippets","enableLiveAutocompletion","enableBasicAutocompletion","highlightActiveLine","editorProps","$blockScrolling","setOptions","wrapBehavioursEnabled","Sidebar","children","useState","xPosition","setX","useEffect","className","transform","minHeight","TestComponent","updateSearch","event","setState","search","target","queries","queryF","filter","indexOf","bind","AccordionExampleNested","userQuery","userFormQuery","userFormContent_User","user","key","title","userContent","Accordion","panels","userFormContent","rootPanels","SearchQuery","defaultActiveIndex","styled","client","ApolloClient","uri","App","Boolean","window","location","hostname","match","require","initialState","gql","reducer","action","format","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.511a21d6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button, Icon, Modal } from \"semantic-ui-react\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\n\r\nclass HistoryModal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                <Modal\r\n                    trigger={\r\n                        <Button animated=\"vertical\">\r\n                            <Button.Content hidden>History</Button.Content>\r\n                            <Button.Content visible>\r\n                                <Icon name=\"history\" />\r\n                            </Button.Content>\r\n                        </Button>\r\n                    }\r\n                    style={{\r\n                        height: \"auto\",\r\n                        top: \"auto\",\r\n                        left: \"auto\",\r\n                        bottom: \"auto\",\r\n                        right: \"auto\",\r\n                    }}\r\n                >\r\n                    <Modal.Header>History of Query</Modal.Header>\r\n                    <Modal.Content>\r\n                        <Modal.Description>\r\n                            {this.props.historyArray.map((history) => (\r\n                                <h2>\r\n                                    {\" \"}\r\n                                    {history}\r\n                                    <CopyToClipboard text={history}>\r\n                                        <Button animated=\"vertical\">\r\n                                            <Button.Content hidden>\r\n                                                Copy\r\n                                            </Button.Content>\r\n                                            <Button.Content visible>\r\n                                                <Icon name=\"copy\" />\r\n                                            </Button.Content>\r\n                                        </Button>\r\n                                    </CopyToClipboard>\r\n                                    <br></br>\r\n                                </h2>\r\n                            ))}\r\n                        </Modal.Description>\r\n                    </Modal.Content>\r\n                </Modal>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HistoryModal;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport AceEditor from \"react-ace\";\r\nimport \"ace-builds/src-noconflict/mode-json\";\r\nimport \"ace-builds/src-noconflict/theme-dracula\";\r\nimport \"ace-builds/src-noconflict/ext-language_tools\";\r\nimport ReactJson from \"react-json-view\";\r\n\r\nclass AceEditorJS extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                <ReactJson\r\n                    src={this.props.codeJS}\r\n                    style={{\r\n                        position: \"absolute\",\r\n                        right: \"40px\",\r\n                        width: \"700px\",\r\n                    }}\r\n                    theme=\"ocean\"\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        codeJS: state.codeJS,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(AceEditorJS);\r\n","import React from \"react\";\r\nimport { Button, Icon, Popup, Image } from \"semantic-ui-react\";\r\n\r\nclass PopupIcon extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {\r\n                    <Popup\r\n                        content={this.helper}\r\n                        header=\"If you help , you can check https://graphql.org/\"\r\n                        position=\"bottom\"\r\n                        trigger={\r\n                            <Image\r\n                                src=\"https://semantic-ui.com/images/avatar/small/stevie.jpg\"\r\n                                avatar\r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PopupIcon;\r\n","import React from \"react\";\r\nimport { Dimmer, Loader, Image, Segment } from \"semantic-ui-react\";\r\n\r\nclass LoaderAnimation extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Segment\r\n                    style={{\r\n                        position: \"absolute\",\r\n                        right: \"40px\",\r\n                        width: \"700px\",\r\n                    }}\r\n                >\r\n                    <Dimmer\r\n                        active\r\n                        style={{\r\n                            position: \"absolute\",\r\n                            right: \"40px\",\r\n                            width: \"700px\",\r\n                            height: \"700px\",\r\n                        }}\r\n                    >\r\n                        <Loader\r\n                            style={{\r\n                                position: \"absolute\",\r\n                                right: \"40px\",\r\n                                width: \"700px\",\r\n                            }}\r\n                        >\r\n                            Loading\r\n                        </Loader>\r\n                    </Dimmer>\r\n                </Segment>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoaderAnimation;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { Button, Icon } from \"semantic-ui-react\";\r\nimport \"ace-builds/src-noconflict/mode-graphqlschema\";\r\nimport \"ace-builds/src-noconflict/mode-javascript\";\r\nimport \"ace-builds/src-noconflict/theme-dracula\";\r\nimport \"ace-builds/src-noconflict/ext-language_tools\";\r\nimport { Query } from \"react-apollo\";\r\nimport HistoryModal from \"./HistoryModal/HistoryModal\";\r\nimport AceEditorJS from \"./AceEditorJS/AceEditorJS\";\r\nimport PopupIcon from \"./PopupIcon/PopupIcon\";\r\nimport Loader from \"./Loader/Loader\";\r\n\r\nclass QueryResult extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.historyArray = [];\r\n    }\r\n\r\n    //run query\r\n    play = () => {\r\n        this.props.resultOfPlay();\r\n        this.historyArray.push(this.props.codeGraphql + \" \\n\");\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Button animated=\"vertical\" onClick={this.play}>\r\n                    <Button.Content hidden>Run</Button.Content>\r\n                    <Button.Content visible>\r\n                        <Icon name=\"play circle outline\" />\r\n                    </Button.Content>\r\n                </Button>\r\n                <HistoryModal historyArray={this.historyArray} />\r\n                <AceEditorJS />\r\n                {this.props.playButtonClick === true ? (\r\n                    <Query query={this.props.currentQuery}>\r\n                        {({ loading, error, data }) => {\r\n                            if (loading) return <Loader />;\r\n                            if (error) console.log(error);\r\n                            if (data) {\r\n                                this.props.setQueryResult(data);\r\n                                return \"\";\r\n                            } else {\r\n                                const wrongQuery = {\r\n                                    Message: \"Wrong Query\",\r\n                                    Helper: \"Please check docs\",\r\n                                    Query: this.props.codeGraphql,\r\n                                };\r\n                                this.setData(wrongQuery);\r\n                                return \"\";\r\n                            }\r\n                        }}\r\n                    </Query>\r\n                ) : null}\r\n                <PopupIcon />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        codeJS: state.codeJS,\r\n        queryText: state.queryText,\r\n        currentQuery: state.currentQuery,\r\n        playButtonClick: state.playButtonClick,\r\n    };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        resultOfPlay: () => dispatch({ type: \"RESULTOFPLAY\" }),\r\n        setQueryResult: (value) =>\r\n            dispatch({ type: \"SETQUERYRESULT\", val: value }),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QueryResult);\r\n","import React from \"react\";\r\nimport { Button, Icon } from \"semantic-ui-react\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\n\r\nclass CopyClipBoard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <CopyToClipboard text={this.props.copy}>\r\n                <Button animated=\"vertical\">\r\n                    <Button.Content hidden>Copy</Button.Content>\r\n                    <Button.Content visible>\r\n                        <Icon name=\"copy\" />\r\n                    </Button.Content>\r\n                </Button>\r\n            </CopyToClipboard>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CopyClipBoard;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport AceEditor from \"react-ace\";\r\nimport \"ace-builds/src-noconflict/mode-graphqlschema\";\r\nimport \"ace-builds/src-noconflict/mode-javascript\";\r\nimport \"ace-builds/src-noconflict/theme-dracula\";\r\nimport \"ace-builds/src-noconflict/ext-language_tools\";\r\nimport { Button, Icon } from \"semantic-ui-react\";\r\n\r\nimport QueryResult from \"./QueryResult/QueryResult\";\r\nimport CopyToClipboard from \"./CopyToClickboard/CopyToClipboard\";\r\n\r\nclass AceEditorGraphql extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                <Button\r\n                    animated=\"vertical\"\r\n                    onClick={this.props.prettifycodeGraphql}\r\n                >\r\n                    <Button.Content hidden>Prettify</Button.Content>\r\n                    <Button.Content visible>\r\n                        <Icon name=\"leaf\" />\r\n                    </Button.Content>\r\n                </Button>\r\n                <CopyToClipboard copy={this.props.codeGraphql} />\r\n                <AceEditor\r\n                    mode=\"graphqlschema\"\r\n                    theme=\"dracula\"\r\n                    style={{\r\n                        position: \"absolute\",\r\n                        left: \"40px\",\r\n                        width: \"700px\",\r\n                    }}\r\n                    value={this.props.codeGraphql}\r\n                    onChange={this.props.onChangecodeGraphql}\r\n                    name=\"UNIQUE_ID_OF_DIV\"\r\n                    enableSnippets={true}\r\n                    enableLiveAutocompletion={true}\r\n                    enableBasicAutocompletion={true}\r\n                    highlightActiveLine={true}\r\n                    editorProps={{ $blockScrolling: true }}\r\n                    setOptions={{\r\n                        enableBasicAutocompletion: true,\r\n                        enableLiveAutocompletion: true,\r\n                        enableSnippets: true,\r\n                        wrapBehavioursEnabled: true,\r\n                    }}\r\n                />\r\n                <QueryResult />\r\n            </>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        codeGraphql: state.codeGraphql,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onChangecodeGraphql: (value) =>\r\n            dispatch({ type: \"ONCHANGEGRAPHQL\", val: value }),\r\n        prettifycodeGraphql: () => dispatch({ type: \"PRETTIFYGRAPHQL\" }),\r\n    };\r\n};\r\n\r\n//export default AceEditorGraphql;\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AceEditorGraphql);\r\n","import \"./Sidebar.css\";\r\nimport React from \"react\";\r\nimport { Button, Icon } from \"semantic-ui-react\";\r\n\r\nexport const Sidebar = ({ width, height, children }) => {\r\n    const [xPosition, setX] = React.useState(-width);\r\n\r\n    //when clicked, xPosition should be change\r\n    const toggleMenu = () => {\r\n        if (xPosition < 0) {\r\n            setX(0);\r\n        } else {\r\n            setX(-width);\r\n        }\r\n    };\r\n\r\n    // after first render component\r\n    React.useEffect(() => {\r\n        setX(-width);\r\n    }, []); // componentDidMount\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div\r\n                className=\"side-bar\"\r\n                style={{\r\n                    transform: `translatex(${xPosition}px)`,\r\n                    width: width,\r\n                    minHeight: height,\r\n                }}\r\n            >\r\n                <Button\r\n                    animated=\"vertical\"\r\n                    className=\"toggle-menu\"\r\n                    onClick={() => toggleMenu()}\r\n                    style={{\r\n                        transform: `translate(${width}px, 20vh)`,\r\n                    }}\r\n                >\r\n                    <Button.Content hidden>Docs</Button.Content>\r\n                    <Button.Content visible>\r\n                        <Icon\r\n                            className=\"toggle-menu\"\r\n                            style={{\r\n                                transform: `translate(${width}px, 20vh)`,\r\n                            }}\r\n                            name=\"bookmark\"\r\n                        />\r\n                    </Button.Content>\r\n                </Button>\r\n                <div className=\"content\">{children}</div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import Search from \"react-search\";\r\nimport ReactDOM from \"react-dom\";\r\nimport AccordionExampleNested from \"../AccordionQueryList/AccordionQueryList\";\r\n\r\nimport React, { Component, PropTypes } from \"react\";\r\n\r\nclass TestComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            search: \"Search query...\",\r\n            queries: [\"userQuery\", \"userFormQuery\"],\r\n        };\r\n    }\r\n    updateSearch = (event) => {\r\n        this.setState({\r\n            search: event.target.value,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        let queryF = this.state.queries.filter((query) => {\r\n            return query.indexOf(this.state.search) !== -1;\r\n        });\r\n        return (\r\n            <div>\r\n                <u1>\r\n                    {queryF.map((query) => {\r\n                        return query;\r\n                    })}\r\n                </u1>\r\n                <input\r\n                    type=\"text\"\r\n                    value={this.state.search}\r\n                    onChange={this.updateSearch.bind(this)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TestComponent;\r\n","import React from \"react\";\r\nimport { Accordion, Message } from \"semantic-ui-react\";\r\nimport SearchQuery from \"../SearchQuery/SearchQuery\";\r\n\r\nclass AccordionExampleNested extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    // find more easy way\r\n    userQuery =\r\n        \"name: { type: GraphQLString },email: { type: GraphQLString },time_zone: { type: GraphQLString },account_type: { type: GraphQLString },status: { type: GraphQLString }, loginToGetSubmissions: { type: GraphQLInt }, pdf_designer_group: { type: GraphQLInt },}\";\r\n\r\n    userFormQuery =\r\n        \"id: { type: GraphQLString },\" +\r\n        \" username: { type: GraphQLString },\" +\r\n        \"type: { type: GraphQLString },\" +\r\n        \"last_submission: { type: GraphQLString },\" +\r\n        \"status: { type: GraphQLString },\" +\r\n        \"height: { type: GraphQLInt },\" +\r\n        \"count: { type: GraphQLInt },\";\r\n\r\n    userFormContent_User = (\r\n        <div>\r\n            <Message>{this.userFormQuery}</Message>\r\n        </div>\r\n    );\r\n\r\n    user = [\r\n        {\r\n            key: \"panel-1a\",\r\n            title: \"userForm\",\r\n            content: this.userFormContent_User,\r\n        },\r\n    ];\r\n\r\n    userContent = (\r\n        <div>\r\n            Schema Details\r\n            <Message>\r\n                {this.userQuery}\r\n                <Accordion.Accordion panels={this.user} />\r\n            </Message>\r\n        </div>\r\n    );\r\n\r\n    userFormContent = (\r\n        <div>\r\n            Schema Details\r\n            <div>\r\n                <Message>{this.userFormQuery}</Message>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    rootPanels = [\r\n        {\r\n            key: \"panel-1\",\r\n            title: \"user query\",\r\n            content: { content: this.userContent },\r\n        },\r\n        {\r\n            key: \"panel-2\",\r\n            title: \"userForm query\",\r\n            content: { content: this.userFormContent },\r\n        },\r\n    ];\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1> JotForm Query</h1>\r\n                <SearchQuery />\r\n                <Accordion\r\n                    defaultActiveIndex={0}\r\n                    panels={this.rootPanels}\r\n                    styled\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AccordionExampleNested;\r\n","import React, { Component } from \"react\";\r\nimport ApolloClient from \"apollo-boost\";\r\nimport AceEditorGraphql from \"./components/AceEditorGraphql/AceEditorGraphql\";\r\nimport { ApolloProvider } from \"react-apollo\";\r\nimport \"./App.css\";\r\nimport \"bootswatch/dist/solar/bootstrap.min.css\";\r\nimport { Sidebar } from \"./components/SideBarDocs/SideBarDocs\";\r\nimport AccordionExampleNested from \"./components/SideBarDocs/AccordionQueryList/AccordionQueryList\";\r\n\r\nconst client = new ApolloClient({\r\n    uri: \"/graphql\",\r\n});\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <ApolloProvider client={client}>\r\n                <div className=\"container\">\r\n                    <h1>GraphQL</h1>\r\n                </div>\r\n\r\n                <AceEditorGraphql />\r\n                <Sidebar width={300} height={\"100vh\"}>\r\n                    <AccordionExampleNested />\r\n                </Sidebar>\r\n            </ApolloProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { format } from \"graphql-formatter\";\r\nimport gql from \"graphql-tag\";\r\n\r\nconst redux = require(\"redux\");\r\nconst reactRedux = require(\"react-redux\");\r\n\r\nconst initialState = {\r\n    codeGraphql: \"\",\r\n    codeJS: {},\r\n    queryText: \"\",\r\n    currentQuery: gql`\r\n        {\r\n            ${`queryText`}\r\n        }\r\n    `,\r\n    playButtonClick: false,\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    if (action.type === \"ONCHANGEGRAPHQL\") {\r\n        return {\r\n            ...state,\r\n            codeGraphql: action.val,\r\n        };\r\n    }\r\n    if (action.type === \"PRETTIFYGRAPHQL\") {\r\n        return {\r\n            ...state,\r\n            codeGraphql: format(state.codeGraphql),\r\n        };\r\n    }\r\n    if (action.type === \"RESULTOFPLAY\") {\r\n        return {\r\n            ...state,\r\n            playButtonClick: true,\r\n            queryText: state.codeGraphql,\r\n            currentQuery: gql`\r\n                ${state.codeGraphql}\r\n            `,\r\n        };\r\n    }\r\n    if (action.type === \"SETQUERYRESULT\") {\r\n        return {\r\n            ...state,\r\n            playButtonClick: false,\r\n            codeJS: action.val,\r\n        };\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { createStore } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport reducer from \"./store/reducer\";\r\n\r\nconst store = createStore(reducer);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}